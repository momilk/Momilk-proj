
ArduinoMicroToturial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00001e1a  00001eae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014d  0080016e  0080016e  00001f1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f1c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006c8  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000af5  00000000  00000000  00002614  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bc75  00000000  00000000  00003109  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026d1  00000000  00000000  0000ed7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c90  00000000  00000000  0001144f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d5c  00000000  00000000  000150e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002e5d  00000000  00000000  00015e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f9c  00000000  00000000  00018c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006e0  00000000  00000000  0001cc35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
SPIClass SPI;

void SPIClass::begin() {

  // Set SS to high so a connected chip will be "deselected" by default
  digitalWrite(SS, HIGH);
       0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__dtors_end>
       4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>

  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).
  pinMode(SS, OUTPUT);
       8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
       c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI
  // automatically switches to Slave, so the data direction of
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
      10:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      14:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
  SPCR |= _BV(SPE);
      18:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
  // MISO pin automatically overrides to INPUT.
  // By doing this AFTER enabling SPI, we avoid accidentally
  // clocking in a single bit since the lines go directly
  // from "input" to SPI control.  
  // http://code.google.com/p/arduino/issues/detail?id=888
  pinMode(SCK, OUTPUT);
      1c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_7>
      20:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
  pinMode(MOSI, OUTPUT);
      24:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__vector_9>
      28:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__vector_10>
      2c:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__vector_11>
      30:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      34:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      38:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      3c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      40:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      44:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      48:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      4c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      50:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      54:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      58:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      5c:	0c 94 56 07 	jmp	0xeac	; 0xeac <__vector_23>
      60:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      64:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      68:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      6c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      70:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      74:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      78:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      7c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      80:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      84:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      88:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      8c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      90:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__vector_36>
      94:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      98:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      9c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      a0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      a4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      a8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	00 c2       	rjmp	.+1024   	; 0x4ae <loop+0x4c>
      ae:	01 00       	.word	0x0001	; ????
      b0:	01 00       	.word	0x0001	; ????
      b2:	11 00       	.word	0x0011	; ????
      b4:	11 00       	.word	0x0011	; ????
      b6:	0c 00       	.word	0x000c	; ????
      b8:	00 e1       	ldi	r16, 0x10	; 16
      ba:	00 00       	nop
      bc:	0a 00       	.word	0x000a	; ????
      be:	25 00       	.word	0x0025	; ????
      c0:	25 00       	.word	0x0025	; ????
      c2:	21 00       	.word	0x0021	; ????
      c4:	00 96       	adiw	r24, 0x00	; 0
      c6:	00 00       	nop
      c8:	19 00       	.word	0x0019	; ????
      ca:	39 00       	.word	0x0039	; ????
      cc:	39 00       	.word	0x0039	; ????
      ce:	36 00       	.word	0x0036	; ????
      d0:	12 7a       	andi	r17, 0xA2	; 162
      d2:	00 00       	nop
      d4:	1f 00       	.word	0x001f	; ????
      d6:	46 00       	.word	0x0046	; ????
      d8:	46 00       	.word	0x0046	; ????
      da:	44 00       	.word	0x0044	; ????
      dc:	80 70       	andi	r24, 0x00	; 0
      de:	00 00       	nop
      e0:	22 00       	.word	0x0022	; ????
      e2:	4d 00       	.word	0x004d	; ????
      e4:	4d 00       	.word	0x004d	; ????
      e6:	4a 00       	.word	0x004a	; ????
      e8:	00 4b       	sbci	r16, 0xB0	; 176
      ea:	00 00       	nop
      ec:	36 00       	.word	0x0036	; ????
      ee:	75 00       	.word	0x0075	; ????
      f0:	75 00       	.word	0x0075	; ????
      f2:	72 00       	.word	0x0072	; ????
      f4:	40 38       	cpi	r20, 0x80	; 128
      f6:	00 00       	nop
      f8:	4a 00       	.word	0x004a	; ????
      fa:	9c 00       	.word	0x009c	; ????
      fc:	9c 00       	.word	0x009c	; ????
      fe:	99 00       	.word	0x0099	; ????
     100:	80 25       	eor	r24, r0
     102:	00 00       	nop
     104:	72 00       	.word	0x0072	; ????
     106:	ec 00       	.word	0x00ec	; ????
     108:	ec 00       	.word	0x00ec	; ????
     10a:	e9 00       	.word	0x00e9	; ????
     10c:	c0 12       	cpse	r12, r16
     10e:	00 00       	nop
     110:	e9 00       	.word	0x00e9	; ????
     112:	da 01       	movw	r26, r20
     114:	da 01       	movw	r26, r20
     116:	d7 01       	movw	r26, r14
     118:	60 09       	sbc	r22, r0
     11a:	00 00       	nop
     11c:	d7 01       	movw	r26, r14
     11e:	b6 03       	fmuls	r19, r22
     120:	b6 03       	fmuls	r19, r22
     122:	b3 03       	fmuls	r19, r19
     124:	b0 04       	cpc	r11, r0
     126:	00 00       	nop
     128:	b3 03       	fmuls	r19, r19
     12a:	6e 07       	cpc	r22, r30
     12c:	6e 07       	cpc	r22, r30
     12e:	6b 07       	cpc	r22, r27
     130:	58 02       	muls	r21, r24
     132:	00 00       	nop
     134:	6e 07       	cpc	r22, r30
     136:	dc 0e       	add	r13, r28
     138:	dc 0e       	add	r13, r28
     13a:	d8 0e       	add	r13, r24
     13c:	2c 01       	movw	r4, r24
     13e:	00 00       	nop
     140:	dc 0e       	add	r13, r28
     142:	c1 1d       	adc	r28, r1
     144:	c1 1d       	adc	r28, r1
     146:	be 1d       	adc	r27, r14

00000148 <port_to_mode_PGM>:
     148:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000156 <port_to_output_PGM>:
     156:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000164 <port_to_input_PGM>:
     164:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

00000172 <digital_pin_to_port_PGM>:
     172:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     182:	02 02 06 06 06 06 06 06 04 04 02 02 02 04           ..............

00000190 <digital_pin_to_bit_mask_PGM>:
     190:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     1a0:	04 01 80 40 20 10 02 01 10 80 10 20 40 40           ...@ ...... @@

000001ae <digital_pin_to_timer_PGM>:
     1ae:	00 00 00 02 00 08 0e 00 00 03 04 01 00 0b 00 00     ................
	...

000001cc <analog_pin_to_channel_PGM>:
     1cc:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

000001d8 <_cdcInterface>:
     1d8:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     1e8:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1f8:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     208:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
	...

0000021a <STRING_LANGUAGE>:
     21a:	04 03 09 04                                         ....

0000021e <STRING_IPRODUCT>:
     21e:	22 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     ".A.r.d.u.i.n.o.
     22e:	20 00 4d 00 69 00 63 00 72 00 6f 00 20 00 20 00      .M.i.c.r.o. . .
     23e:	20 00                                                .

00000240 <STRING_IMANUFACTURER>:
     240:	18 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     ..A.r.d.u.i.n.o.
     250:	20 00 4c 00 4c 00 43 00                              .L.L.C.

00000258 <USB_DeviceDescriptor>:
     258:	12 01 00 02 00 00 00 40 41 23 37 80 00 01 01 02     .......@A#7.....
     268:	00 01                                               ..

0000026a <USB_DeviceDescriptorA>:
     26a:	12 01 00 02 02 00 00 40 41 23 37 80 00 01 01 02     .......@A#7.....
     27a:	00 01                                               ..

0000027c <_initEndpoints>:
     27c:	00 c1 80 81 c1                                      .....

00000281 <_hidReportDescriptor>:
     281:	05 01 09 02 a1 01 09 01 a1 00 85 01 05 09 19 01     ................
     291:	29 03 15 00 25 01 95 03 75 01 81 02 95 01 75 05     )...%...u.....u.
     2a1:	81 03 05 01 09 30 09 31 09 38 15 81 25 7f 75 08     .....0.1.8..%.u.
     2b1:	95 03 81 06 c0 c0 05 01 09 06 a1 01 85 02 05 07     ................
     2c1:	19 e0 29 e7 15 00 25 01 75 01 95 08 81 02 95 01     ..)...%.u.......
     2d1:	75 08 81 03 95 06 75 08 15 00 25 65 05 07 19 00     u.....u...%e....
     2e1:	29 65 81 00 c0                                      )e...

000002e6 <_hidInterface>:
     2e6:	09 04 02 00 01 03 00 00 00 09 21 01 01 00 01 22     ..........!...."
     2f6:	65 00 07 05 84 03 40 00 01                          e.....@..

000002ff <_asciimap>:
	...
     307:	2a 2b 28 00 00 00 00 00 00 00 00 00 00 00 00 00     *+(.............
	...
     31f:	2c 9e b4 a0 a1 a2 a4 34 a6 a7 a5 ae 36 2d 37 38     ,......4....6-78
     32f:	27 1e 1f 20 21 22 23 24 25 26 b3 33 b6 2e b7 b8     '.. !"#$%&.3....
     33f:	9f 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f 90 91 92     ................
     34f:	93 94 95 96 97 98 99 9a 9b 9c 9d 2f 31 30 a3 ad     .........../10..
     35f:	35 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12     5...............
     36f:	13 14 15 16 17 18 19 1a 1b 1c 1d af b1 b0 b5 00     ................
	...

00000380 <__ctors_start>:
     380:	59 02       	muls	r21, r25
     382:	52 07       	cpc	r21, r18
     384:	2b 09       	sbc	r18, r11
     386:	63 0b       	sbc	r22, r19
     388:	c9 0d       	add	r28, r9

0000038a <__ctors_end>:
     38a:	62 02       	muls	r22, r18

0000038c <__dtors_end>:
     38c:	11 24       	eor	r1, r1
     38e:	1f be       	out	0x3f, r1	; 63
     390:	cf ef       	ldi	r28, 0xFF	; 255
     392:	da e0       	ldi	r29, 0x0A	; 10
     394:	de bf       	out	0x3e, r29	; 62
     396:	cd bf       	out	0x3d, r28	; 61

00000398 <__do_copy_data>:
     398:	11 e0       	ldi	r17, 0x01	; 1
     39a:	a0 e0       	ldi	r26, 0x00	; 0
     39c:	b1 e0       	ldi	r27, 0x01	; 1
     39e:	ea e1       	ldi	r30, 0x1A	; 26
     3a0:	fe e1       	ldi	r31, 0x1E	; 30
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <__do_copy_data+0x10>
     3a4:	05 90       	lpm	r0, Z+
     3a6:	0d 92       	st	X+, r0
     3a8:	ae 36       	cpi	r26, 0x6E	; 110
     3aa:	b1 07       	cpc	r27, r17
     3ac:	d9 f7       	brne	.-10     	; 0x3a4 <__do_copy_data+0xc>

000003ae <__do_clear_bss>:
     3ae:	22 e0       	ldi	r18, 0x02	; 2
     3b0:	ae e6       	ldi	r26, 0x6E	; 110
     3b2:	b1 e0       	ldi	r27, 0x01	; 1
     3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <.do_clear_bss_start>

000003b6 <.do_clear_bss_loop>:
     3b6:	1d 92       	st	X+, r1

000003b8 <.do_clear_bss_start>:
     3b8:	ab 3b       	cpi	r26, 0xBB	; 187
     3ba:	b2 07       	cpc	r27, r18
     3bc:	e1 f7       	brne	.-8      	; 0x3b6 <.do_clear_bss_loop>

000003be <__do_global_ctors>:
     3be:	13 e0       	ldi	r17, 0x03	; 3
     3c0:	ca e8       	ldi	r28, 0x8A	; 138
     3c2:	d3 e0       	ldi	r29, 0x03	; 3
     3c4:	04 c0       	rjmp	.+8      	; 0x3ce <__do_global_ctors+0x10>
     3c6:	22 97       	sbiw	r28, 0x02	; 2
     3c8:	fe 01       	movw	r30, r28
     3ca:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__tablejump__>
     3ce:	c0 38       	cpi	r28, 0x80	; 128
     3d0:	d1 07       	cpc	r29, r17
     3d2:	c9 f7       	brne	.-14     	; 0x3c6 <__do_global_ctors+0x8>
     3d4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <main>
     3d8:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__do_global_dtors>

000003dc <__bad_interrupt>:
     3dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003e0 <__vector_7>:
//}



ISR(INT6_vect)
{
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	8f 93       	push	r24
	int6_flag=true;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	80 93 8a 01 	sts	0x018A, r24
}
     3f2:	8f 91       	pop	r24
     3f4:	0f 90       	pop	r0
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	0f 90       	pop	r0
     3fa:	1f 90       	pop	r1
     3fc:	18 95       	reti

000003fe <setup>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup(){
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
	pinMode(A5, OUTPUT);
     402:	61 e0       	ldi	r22, 0x01	; 1
     404:	87 e1       	ldi	r24, 0x17	; 23
     406:	0e 94 4d 08 	call	0x109a	; 0x109a <pinMode>
	pinMode(A4, OUTPUT);
     40a:	61 e0       	ldi	r22, 0x01	; 1
     40c:	86 e1       	ldi	r24, 0x16	; 22
     40e:	0e 94 4d 08 	call	0x109a	; 0x109a <pinMode>
	pinMode(blt_key,OUTPUT);
     412:	ce e0       	ldi	r28, 0x0E	; 14
     414:	d1 e0       	ldi	r29, 0x01	; 1
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	88 81       	ld	r24, Y
     41a:	0e 94 4d 08 	call	0x109a	; 0x109a <pinMode>
	pinMode(blt_serial_out,OUTPUT);
     41e:	61 e0       	ldi	r22, 0x01	; 1
     420:	80 91 10 01 	lds	r24, 0x0110
     424:	0e 94 4d 08 	call	0x109a	; 0x109a <pinMode>
	pinMode(blt_serial_in,INPUT);
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	80 91 12 01 	lds	r24, 0x0112
     42e:	0e 94 4d 08 	call	0x109a	; 0x109a <pinMode>
	digitalWrite(blt_key,LOW);
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	88 81       	ld	r24, Y
     436:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
	Serial.begin(9600);
     43a:	40 e8       	ldi	r20, 0x80	; 128
     43c:	55 e2       	ldi	r21, 0x25	; 37
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	87 e9       	ldi	r24, 0x97	; 151
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	0e 94 0d 09 	call	0x121a	; 0x121a <_ZN7Serial_5beginEm>
	BltSerial.begin(9600);  
     44a:	40 e8       	ldi	r20, 0x80	; 128
     44c:	55 e2       	ldi	r21, 0x25	; 37
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	8e e6       	ldi	r24, 0x6E	; 110
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_ZN14SoftwareSerial5beginEl>
  //  Wire.begin();   
	ButtonIntFunc();
}
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
	pinMode(blt_serial_in,INPUT);
	digitalWrite(blt_key,LOW);
	Serial.begin(9600);
	BltSerial.begin(9600);  
  //  Wire.begin();   
	ButtonIntFunc();
     45e:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <_Z13ButtonIntFuncv>

00000462 <loop>:

boolean cont =false;
void loop()	{
	
	
	digitalWrite(A4, HIGH);
     462:	61 e0       	ldi	r22, 0x01	; 1
     464:	86 e1       	ldi	r24, 0x16	; 22
     466:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
	digitalWrite(A5, HIGH);
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	87 e1       	ldi	r24, 0x17	; 23
     46e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
	delay(1000);
     472:	68 ee       	ldi	r22, 0xE8	; 232
     474:	73 e0       	ldi	r23, 0x03	; 3
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <delay>
	digitalWrite(A4, LOW);
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	86 e1       	ldi	r24, 0x16	; 22
     482:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
	digitalWrite(A5, LOW);
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	87 e1       	ldi	r24, 0x17	; 23
     48a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
	delay(1000);
     48e:	68 ee       	ldi	r22, 0xE8	; 232
     490:	73 e0       	ldi	r23, 0x03	; 3
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 9e 07 	call	0xf3c	; 0xf3c <delay>
	//if (cont==false)
	delay(10000);
     49a:	60 e1       	ldi	r22, 0x10	; 16
     49c:	77 e2       	ldi	r23, 0x27	; 39
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 9e 07 	call	0xf3c	; 0xf3c <delay>
    BltSerial.print("aaaaaa:bbbbb:cccc");
     4a6:	6e e1       	ldi	r22, 0x1E	; 30
     4a8:	71 e0       	ldi	r23, 0x01	; 1
     4aa:	8e e6       	ldi	r24, 0x6E	; 110
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <_ZN5Print5printEPKc>

000004b2 <_GLOBAL__sub_I_val>:
int blt_serial_in = 11; //D11
int blt_serial_out = 10; //D10
int blt_key = 9; //D9
int INT6_pin = 7; 
boolean int6_flag =false;
SoftwareSerial BltSerial(blt_serial_in,blt_serial_out); // RX, TX  MCU side
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	40 91 10 01 	lds	r20, 0x0110
     4b8:	60 91 12 01 	lds	r22, 0x0112
     4bc:	8e e6       	ldi	r24, 0x6E	; 110
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	0c 94 4f 04 	jmp	0x89e	; 0x89e <_ZN14SoftwareSerialC1Ehhb>

000004c4 <_GLOBAL__sub_D_val>:
     4c4:	8e e6       	ldi	r24, 0x6E	; 110
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0c 94 5e 05 	jmp	0xabc	; 0xabc <_ZN14SoftwareSerialD1Ev>

000004cc <_Z13ButtonIntFuncv>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "ButtonInt.h"

void ButtonIntFunc(){
	cli();
     4cc:	f8 94       	cli
	EIMSK |=(1<<INT6);
     4ce:	ee 9a       	sbi	0x1d, 6	; 29
	EICRB |=(0<<ISC60) | (1<<ISC61);
     4d0:	ea e6       	ldi	r30, 0x6A	; 106
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	80 62       	ori	r24, 0x20	; 32
     4d8:	80 83       	st	Z, r24
	sei();
     4da:	78 94       	sei
     4dc:	08 95       	ret

000004de <_ZN14SoftwareSerial4readEv>:


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     4de:	20 91 cd 01 	lds	r18, 0x01CD
     4e2:	30 91 ce 01 	lds	r19, 0x01CE
     4e6:	28 17       	cp	r18, r24
     4e8:	39 07       	cpc	r19, r25
     4ea:	b9 f4       	brne	.+46     	; 0x51a <_ZN14SoftwareSerial4readEv+0x3c>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     4ec:	90 91 8b 01 	lds	r25, 0x018B
     4f0:	80 91 8c 01 	lds	r24, 0x018C
     4f4:	98 17       	cp	r25, r24
     4f6:	89 f0       	breq	.+34     	; 0x51a <_ZN14SoftwareSerial4readEv+0x3c>
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     4f8:	e0 91 8b 01 	lds	r30, 0x018B
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	e3 57       	subi	r30, 0x73	; 115
     500:	fe 4f       	sbci	r31, 0xFE	; 254
     502:	80 81       	ld	r24, Z
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     504:	20 91 8b 01 	lds	r18, 0x018B
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	2f 5f       	subi	r18, 0xFF	; 255
     50c:	3f 4f       	sbci	r19, 0xFF	; 255
     50e:	2f 73       	andi	r18, 0x3F	; 63
     510:	33 27       	eor	r19, r19
     512:	20 93 8b 01 	sts	0x018B, r18
  return d;
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	08 95       	ret

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
     51a:	8f ef       	ldi	r24, 0xFF	; 255
     51c:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     51e:	08 95       	ret

00000520 <_ZN14SoftwareSerial4peekEv>:
  SREG = oldSREG;
}

int SoftwareSerial::peek()
{
  if (!isListening())
     520:	20 91 cd 01 	lds	r18, 0x01CD
     524:	30 91 ce 01 	lds	r19, 0x01CE
     528:	28 17       	cp	r18, r24
     52a:	39 07       	cpc	r19, r25
     52c:	71 f4       	brne	.+28     	; 0x54a <_ZN14SoftwareSerial4peekEv+0x2a>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     52e:	90 91 8b 01 	lds	r25, 0x018B
     532:	80 91 8c 01 	lds	r24, 0x018C
     536:	98 17       	cp	r25, r24
     538:	41 f0       	breq	.+16     	; 0x54a <_ZN14SoftwareSerial4peekEv+0x2a>
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     53a:	e0 91 8b 01 	lds	r30, 0x018B
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	e3 57       	subi	r30, 0x73	; 115
     542:	fe 4f       	sbci	r31, 0xFE	; 254
     544:	80 81       	ld	r24, Z
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	08 95       	ret
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
     54a:	8f ef       	ldi	r24, 0xFF	; 255
     54c:	9f ef       	ldi	r25, 0xFF	; 255
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     54e:	08 95       	ret

00000550 <_ZN14SoftwareSerial9availableEv>:
  return d;
}

int SoftwareSerial::available()
{
  if (!isListening())
     550:	20 91 cd 01 	lds	r18, 0x01CD
     554:	30 91 ce 01 	lds	r19, 0x01CE
     558:	28 17       	cp	r18, r24
     55a:	39 07       	cpc	r19, r25
     55c:	71 f4       	brne	.+28     	; 0x57a <_ZN14SoftwareSerial9availableEv+0x2a>
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     55e:	80 91 8c 01 	lds	r24, 0x018C
     562:	20 91 8b 01 	lds	r18, 0x018B
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	80 5c       	subi	r24, 0xC0	; 192
     56a:	9f 4f       	sbci	r25, 0xFF	; 255
     56c:	82 1b       	sub	r24, r18
     56e:	91 09       	sbc	r25, r1
     570:	60 e4       	ldi	r22, 0x40	; 64
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__divmodhi4>
     578:	08 95       	ret
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     57e:	08 95       	ret

00000580 <_ZN14SoftwareSerial5flushEv>:
  return 1;
}

void SoftwareSerial::flush()
{
  if (!isListening())
     580:	20 91 cd 01 	lds	r18, 0x01CD
     584:	30 91 ce 01 	lds	r19, 0x01CE
     588:	28 17       	cp	r18, r24
     58a:	39 07       	cpc	r19, r25
     58c:	39 f4       	brne	.+14     	; 0x59c <_ZN14SoftwareSerial5flushEv+0x1c>
    return;

  uint8_t oldSREG = SREG;
     58e:	8f b7       	in	r24, 0x3f	; 63
  cli();
     590:	f8 94       	cli
  _receive_buffer_head = _receive_buffer_tail = 0;
     592:	10 92 8c 01 	sts	0x018C, r1
     596:	10 92 8b 01 	sts	0x018B, r1
  SREG = oldSREG;
     59a:	8f bf       	out	0x3f, r24	; 63
     59c:	08 95       	ret

0000059e <_ZN14SoftwareSerial12tx_pin_writeEh.part.4>:
}

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
     59e:	dc 01       	movw	r26, r24
     5a0:	51 96       	adiw	r26, 0x11	; 17
     5a2:	ed 91       	ld	r30, X+
     5a4:	fc 91       	ld	r31, X
     5a6:	52 97       	sbiw	r26, 0x12	; 18
     5a8:	20 81       	ld	r18, Z
     5aa:	50 96       	adiw	r26, 0x10	; 16
     5ac:	8c 91       	ld	r24, X
     5ae:	80 95       	com	r24
     5b0:	82 23       	and	r24, r18
     5b2:	80 83       	st	Z, r24
     5b4:	08 95       	ret

000005b6 <_ZN14SoftwareSerial10tunedDelayEj>:
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	2f ef       	ldi	r18, 0xFF	; 255
     5bc:	8f 3f       	cpi	r24, 0xFF	; 255
     5be:	92 07       	cpc	r25, r18
     5c0:	d9 f7       	brne	.-10     	; 0x5b8 <_ZN14SoftwareSerial10tunedDelayEj+0x2>
     5c2:	08 95       	ret

000005c4 <_ZN14SoftwareSerial6listenEv>:

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (active_object != this)
     5c4:	20 91 cd 01 	lds	r18, 0x01CD
     5c8:	30 91 ce 01 	lds	r19, 0x01CE
     5cc:	28 17       	cp	r18, r24
     5ce:	39 07       	cpc	r19, r25
     5d0:	89 f0       	breq	.+34     	; 0x5f4 <_ZN14SoftwareSerial6listenEv+0x30>
  {
    _buffer_overflow = false;
     5d2:	fc 01       	movw	r30, r24
     5d4:	23 8d       	ldd	r18, Z+27	; 0x1b
     5d6:	2e 7f       	andi	r18, 0xFE	; 254
     5d8:	23 8f       	std	Z+27, r18	; 0x1b
    uint8_t oldSREG = SREG;
     5da:	2f b7       	in	r18, 0x3f	; 63
    cli();
     5dc:	f8 94       	cli
    _receive_buffer_head = _receive_buffer_tail = 0;
     5de:	10 92 8c 01 	sts	0x018C, r1
     5e2:	10 92 8b 01 	sts	0x018B, r1
    active_object = this;
     5e6:	90 93 ce 01 	sts	0x01CE, r25
     5ea:	80 93 cd 01 	sts	0x01CD, r24
    SREG = oldSREG;
     5ee:	2f bf       	out	0x3f, r18	; 63
    return true;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	08 95       	ret
  }

  return false;
     5f4:	80 e0       	ldi	r24, 0x00	; 0
}
     5f6:	08 95       	ret

000005f8 <_ZN14SoftwareSerial4recvEv>:

//
// The receive routine called by the interrupt handler
//
void SoftwareSerial::recv()
{
     5f8:	ef 92       	push	r14
     5fa:	ff 92       	push	r15
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	ec 01       	movw	r28, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     606:	8b 8d       	ldd	r24, Y+27	; 0x1b
     608:	ee 85       	ldd	r30, Y+14	; 0x0e
     60a:	ff 85       	ldd	r31, Y+15	; 0x0f
     60c:	9d 85       	ldd	r25, Y+13	; 0x0d
     60e:	81 ff       	sbrs	r24, 1
     610:	04 c0       	rjmp	.+8      	; 0x61a <_ZN14SoftwareSerial4recvEv+0x22>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     612:	80 81       	ld	r24, Z
     614:	89 23       	and	r24, r25

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     616:	29 f4       	brne	.+10     	; 0x622 <_ZN14SoftwareSerial4recvEv+0x2a>
     618:	47 c0       	rjmp	.+142    	; 0x6a8 <_ZN14SoftwareSerial4recvEv+0xb0>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     61a:	80 81       	ld	r24, Z
     61c:	89 23       	and	r24, r25

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     61e:	09 f0       	breq	.+2      	; 0x622 <_ZN14SoftwareSerial4recvEv+0x2a>
     620:	43 c0       	rjmp	.+134    	; 0x6a8 <_ZN14SoftwareSerial4recvEv+0xb0>
  {
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     622:	8b 89       	ldd	r24, Y+19	; 0x13
     624:	9c 89       	ldd	r25, Y+20	; 0x14
     626:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN14SoftwareSerial10tunedDelayEj>
     62a:	08 e0       	ldi	r16, 0x08	; 8
     62c:	10 e0       	ldi	r17, 0x00	; 0
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     62e:	ee 24       	eor	r14, r14
     630:	e3 94       	inc	r14
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     632:	f1 2c       	mov	r15, r1
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
     634:	8d 89       	ldd	r24, Y+21	; 0x15
     636:	9e 89       	ldd	r25, Y+22	; 0x16
     638:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN14SoftwareSerial10tunedDelayEj>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     63c:	ee 85       	ldd	r30, Y+14	; 0x0e
     63e:	ff 85       	ldd	r31, Y+15	; 0x0f
     640:	80 81       	ld	r24, Z
     642:	9d 85       	ldd	r25, Y+13	; 0x0d
     644:	89 23       	and	r24, r25
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
      if (rx_pin_read())
     646:	11 f0       	breq	.+4      	; 0x64c <_ZN14SoftwareSerial4recvEv+0x54>
        d |= i;
     648:	fe 28       	or	r15, r14
     64a:	03 c0       	rjmp	.+6      	; 0x652 <_ZN14SoftwareSerial4recvEv+0x5a>
    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
     64c:	8e 2d       	mov	r24, r14
     64e:	80 95       	com	r24
      if (rx_pin_read())
        d |= i;
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
     650:	f8 22       	and	r15, r24
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     652:	ee 0c       	add	r14, r14
     654:	01 50       	subi	r16, 0x01	; 1
     656:	11 09       	sbc	r17, r1
     658:	01 15       	cp	r16, r1
     65a:	11 05       	cpc	r17, r1
     65c:	59 f7       	brne	.-42     	; 0x634 <_ZN14SoftwareSerial4recvEv+0x3c>
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     65e:	8f 89       	ldd	r24, Y+23	; 0x17
     660:	98 8d       	ldd	r25, Y+24	; 0x18
     662:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN2, 1);

    if (_inverse_logic)
     666:	8b 8d       	ldd	r24, Y+27	; 0x1b
     668:	81 fd       	sbrc	r24, 1
      d = ~d;
     66a:	f0 94       	com	r15

    // if buffer full, set the overflow flag and return
    if ((_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF != _receive_buffer_head) 
     66c:	80 91 8c 01 	lds	r24, 0x018C
     670:	20 91 8b 01 	lds	r18, 0x018B
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	01 96       	adiw	r24, 0x01	; 1
     678:	8f 73       	andi	r24, 0x3F	; 63
     67a:	99 27       	eor	r25, r25
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	82 17       	cp	r24, r18
     680:	93 07       	cpc	r25, r19
     682:	79 f0       	breq	.+30     	; 0x6a2 <_ZN14SoftwareSerial4recvEv+0xaa>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     684:	e0 91 8c 01 	lds	r30, 0x018C
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	e3 57       	subi	r30, 0x73	; 115
     68c:	fe 4f       	sbci	r31, 0xFE	; 254
     68e:	f0 82       	st	Z, r15
      _receive_buffer_tail = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     690:	80 91 8c 01 	lds	r24, 0x018C
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	8f 73       	andi	r24, 0x3F	; 63
     69a:	99 27       	eor	r25, r25
     69c:	80 93 8c 01 	sts	0x018C, r24
     6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <_ZN14SoftwareSerial4recvEv+0xb0>
    else 
    {
#if _DEBUG // for scope: pulse pin as overflow indictator
      DebugPulse(_DEBUG_PIN1, 1);
#endif
      _buffer_overflow = true;
     6a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6a4:	81 60       	ori	r24, 0x01	; 1
     6a6:	8b 8f       	std	Y+27, r24	; 0x1b
    "pop r20 \n\t"
    "pop r19 \n\t"
    "pop r18 \n\t"
    ::);
#endif
}
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	08 95       	ret

000006b6 <_ZN14SoftwareSerial12tx_pin_writeEh>:

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
     6b6:	61 11       	cpse	r22, r1
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <_ZN14SoftwareSerial12tx_pin_writeEh+0x8>
     6ba:	0c 94 cf 02 	jmp	0x59e	; 0x59e <_ZN14SoftwareSerial12tx_pin_writeEh.part.4>
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
     6be:	dc 01       	movw	r26, r24
     6c0:	51 96       	adiw	r26, 0x11	; 17
     6c2:	ed 91       	ld	r30, X+
     6c4:	fc 91       	ld	r31, X
     6c6:	52 97       	sbiw	r26, 0x12	; 18
     6c8:	20 81       	ld	r18, Z
     6ca:	50 96       	adiw	r26, 0x10	; 16
     6cc:	8c 91       	ld	r24, X
     6ce:	28 2b       	or	r18, r24
     6d0:	20 83       	st	Z, r18
     6d2:	08 95       	ret

000006d4 <_ZN14SoftwareSerial5writeEh>:

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
     6d4:	df 92       	push	r13
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	ec 01       	movw	r28, r24
     6e4:	e6 2e       	mov	r14, r22
  if (_tx_delay == 0) {
     6e6:	89 8d       	ldd	r24, Y+25	; 0x19
     6e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6ea:	89 2b       	or	r24, r25
     6ec:	39 f4       	brne	.+14     	; 0x6fc <_ZN14SoftwareSerial5writeEh+0x28>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	9b 83       	std	Y+3, r25	; 0x03
     6f4:	8a 83       	std	Y+2, r24	; 0x02
    setWriteError();
    return 0;
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	4d c0       	rjmp	.+154    	; 0x796 <_ZN14SoftwareSerial5writeEh+0xc2>
  }

  uint8_t oldSREG = SREG;
     6fc:	df b6       	in	r13, 0x3f	; 63
  cli();  // turn off interrupts for a clean txmit
     6fe:	f8 94       	cli

  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
     700:	6b 8d       	ldd	r22, Y+27	; 0x1b
     702:	66 95       	lsr	r22
     704:	61 70       	andi	r22, 0x01	; 1
     706:	ce 01       	movw	r24, r28
     708:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN14SoftwareSerial12tx_pin_writeEh>
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);
     70c:	89 8d       	ldd	r24, Y+25	; 0x19
     70e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     710:	05 96       	adiw	r24, 0x05	; 5
     712:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN14SoftwareSerial10tunedDelayEj>

  // Write each of the 8 bits
  if (_inverse_logic)
     716:	8b 8d       	ldd	r24, Y+27	; 0x1b
     718:	08 e0       	ldi	r16, 0x08	; 8
     71a:	10 e0       	ldi	r17, 0x00	; 0
     71c:	ff 24       	eor	r15, r15
     71e:	f3 94       	inc	r15
     720:	81 ff       	sbrs	r24, 1
     722:	19 c0       	rjmp	.+50     	; 0x756 <_ZN14SoftwareSerial5writeEh+0x82>
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     724:	8f 2d       	mov	r24, r15
     726:	8e 21       	and	r24, r14
     728:	21 f0       	breq	.+8      	; 0x732 <_ZN14SoftwareSerial5writeEh+0x5e>
     72a:	ce 01       	movw	r24, r28
     72c:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN14SoftwareSerial12tx_pin_writeEh.part.4>
     730:	04 c0       	rjmp	.+8      	; 0x73a <_ZN14SoftwareSerial5writeEh+0x66>
        tx_pin_write(LOW); // send 1
      else
        tx_pin_write(HIGH); // send 0
     732:	61 e0       	ldi	r22, 0x01	; 1
     734:	ce 01       	movw	r24, r28
     736:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN14SoftwareSerial12tx_pin_writeEh>
    
      tunedDelay(_tx_delay);
     73a:	89 8d       	ldd	r24, Y+25	; 0x19
     73c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     73e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN14SoftwareSerial10tunedDelayEj>
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     742:	ff 0c       	add	r15, r15
     744:	01 50       	subi	r16, 0x01	; 1
     746:	11 09       	sbc	r17, r1
     748:	01 15       	cp	r16, r1
     74a:	11 05       	cpc	r17, r1
     74c:	59 f7       	brne	.-42     	; 0x724 <_ZN14SoftwareSerial5writeEh+0x50>
     74e:	ce 01       	movw	r24, r28
     750:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN14SoftwareSerial12tx_pin_writeEh.part.4>
     754:	19 c0       	rjmp	.+50     	; 0x788 <_ZN14SoftwareSerial5writeEh+0xb4>
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     756:	8f 2d       	mov	r24, r15
     758:	8e 21       	and	r24, r14
     75a:	29 f0       	breq	.+10     	; 0x766 <_ZN14SoftwareSerial5writeEh+0x92>
        tx_pin_write(HIGH); // send 1
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	ce 01       	movw	r24, r28
     760:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN14SoftwareSerial12tx_pin_writeEh>
     764:	03 c0       	rjmp	.+6      	; 0x76c <_ZN14SoftwareSerial5writeEh+0x98>
     766:	ce 01       	movw	r24, r28
     768:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN14SoftwareSerial12tx_pin_writeEh.part.4>
      else
        tx_pin_write(LOW); // send 0
    
      tunedDelay(_tx_delay);
     76c:	89 8d       	ldd	r24, Y+25	; 0x19
     76e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     770:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN14SoftwareSerial10tunedDelayEj>

    tx_pin_write(LOW); // restore pin to natural state
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     774:	ff 0c       	add	r15, r15
     776:	01 50       	subi	r16, 0x01	; 1
     778:	11 09       	sbc	r17, r1
     77a:	01 15       	cp	r16, r1
     77c:	11 05       	cpc	r17, r1
     77e:	59 f7       	brne	.-42     	; 0x756 <_ZN14SoftwareSerial5writeEh+0x82>
        tx_pin_write(LOW); // send 0
    
      tunedDelay(_tx_delay);
    }

    tx_pin_write(HIGH); // restore pin to natural state
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	ce 01       	movw	r24, r28
     784:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN14SoftwareSerial12tx_pin_writeEh>
  }

  SREG = oldSREG; // turn interrupts back on
     788:	df be       	out	0x3f, r13	; 63
  tunedDelay(_tx_delay);
     78a:	89 8d       	ldd	r24, Y+25	; 0x19
     78c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     78e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN14SoftwareSerial10tunedDelayEj>
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
  
  return 1;
}
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	df 90       	pop	r13
     7a4:	08 95       	ret

000007a6 <__vector_9>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     7a6:	1f 92       	push	r1
     7a8:	0f 92       	push	r0
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	0f 92       	push	r0
     7ae:	11 24       	eor	r1, r1
     7b0:	2f 93       	push	r18
     7b2:	3f 93       	push	r19
     7b4:	4f 93       	push	r20
     7b6:	5f 93       	push	r21
     7b8:	6f 93       	push	r22
     7ba:	7f 93       	push	r23
     7bc:	8f 93       	push	r24
     7be:	9f 93       	push	r25
     7c0:	af 93       	push	r26
     7c2:	bf 93       	push	r27
     7c4:	ef 93       	push	r30
     7c6:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     7c8:	80 91 cd 01 	lds	r24, 0x01CD
     7cc:	90 91 ce 01 	lds	r25, 0x01CE
     7d0:	00 97       	sbiw	r24, 0x00	; 0
     7d2:	11 f0       	breq	.+4      	; 0x7d8 <__vector_9+0x32>
  {
    active_object->recv();
     7d4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN14SoftwareSerial4recvEv>

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     7d8:	ff 91       	pop	r31
     7da:	ef 91       	pop	r30
     7dc:	bf 91       	pop	r27
     7de:	af 91       	pop	r26
     7e0:	9f 91       	pop	r25
     7e2:	8f 91       	pop	r24
     7e4:	7f 91       	pop	r23
     7e6:	6f 91       	pop	r22
     7e8:	5f 91       	pop	r21
     7ea:	4f 91       	pop	r20
     7ec:	3f 91       	pop	r19
     7ee:	2f 91       	pop	r18
     7f0:	0f 90       	pop	r0
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	0f 90       	pop	r0
     7f6:	1f 90       	pop	r1
     7f8:	18 95       	reti

000007fa <_ZN14SoftwareSerial5setTXEh>:
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
{
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	ec 01       	movw	r28, r24
     802:	16 2f       	mov	r17, r22
  pinMode(tx, OUTPUT);
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	81 2f       	mov	r24, r17
     808:	0e 94 4d 08 	call	0x109a	; 0x109a <pinMode>
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
     80c:	6b 8d       	ldd	r22, Y+27	; 0x1b
     80e:	66 95       	lsr	r22
     810:	61 70       	andi	r22, 0x01	; 1
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	68 27       	eor	r22, r24
     816:	81 2f       	mov	r24, r17
     818:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
  _transmitBitMask = digitalPinToBitMask(tx);
     81c:	81 2f       	mov	r24, r17
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	fc 01       	movw	r30, r24
     822:	e0 57       	subi	r30, 0x70	; 112
     824:	fe 4f       	sbci	r31, 0xFE	; 254
     826:	e4 91       	lpm	r30, Z
     828:	e8 8b       	std	Y+16, r30	; 0x10
  uint8_t port = digitalPinToPort(tx);
     82a:	fc 01       	movw	r30, r24
     82c:	ee 58       	subi	r30, 0x8E	; 142
     82e:	fe 4f       	sbci	r31, 0xFE	; 254
     830:	e4 91       	lpm	r30, Z
  _transmitPortRegister = portOutputRegister(port);
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	ee 0f       	add	r30, r30
     836:	ff 1f       	adc	r31, r31
     838:	ea 5a       	subi	r30, 0xAA	; 170
     83a:	fe 4f       	sbci	r31, 0xFE	; 254
     83c:	85 91       	lpm	r24, Z+
     83e:	94 91       	lpm	r25, Z
     840:	9a 8b       	std	Y+18, r25	; 0x12
     842:	89 8b       	std	Y+17, r24	; 0x11
}
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	1f 91       	pop	r17
     84a:	08 95       	ret

0000084c <_ZN14SoftwareSerial5setRXEh>:

void SoftwareSerial::setRX(uint8_t rx)
{
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	ec 01       	movw	r28, r24
     854:	16 2f       	mov	r17, r22
  pinMode(rx, INPUT);
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	81 2f       	mov	r24, r17
     85a:	0e 94 4d 08 	call	0x109a	; 0x109a <pinMode>
  if (!_inverse_logic)
     85e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     860:	81 fd       	sbrc	r24, 1
     862:	04 c0       	rjmp	.+8      	; 0x86c <_ZN14SoftwareSerial5setRXEh+0x20>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	81 2f       	mov	r24, r17
     868:	0e 94 da 08 	call	0x11b4	; 0x11b4 <digitalWrite>
  _receivePin = rx;
     86c:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
     86e:	81 2f       	mov	r24, r17
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	fc 01       	movw	r30, r24
     874:	e0 57       	subi	r30, 0x70	; 112
     876:	fe 4f       	sbci	r31, 0xFE	; 254
     878:	e4 91       	lpm	r30, Z
     87a:	ed 87       	std	Y+13, r30	; 0x0d
  uint8_t port = digitalPinToPort(rx);
     87c:	fc 01       	movw	r30, r24
     87e:	ee 58       	subi	r30, 0x8E	; 142
     880:	fe 4f       	sbci	r31, 0xFE	; 254
     882:	e4 91       	lpm	r30, Z
  _receivePortRegister = portInputRegister(port);
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	ee 0f       	add	r30, r30
     888:	ff 1f       	adc	r31, r31
     88a:	ec 59       	subi	r30, 0x9C	; 156
     88c:	fe 4f       	sbci	r31, 0xFE	; 254
     88e:	85 91       	lpm	r24, Z+
     890:	94 91       	lpm	r25, Z
     892:	9f 87       	std	Y+15, r25	; 0x0f
     894:	8e 87       	std	Y+14, r24	; 0x0e
}
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	08 95       	ret

0000089e <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
     89e:	ff 92       	push	r15
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	ec 01       	movw	r28, r24
     8aa:	f6 2e       	mov	r15, r22
     8ac:	52 2f       	mov	r21, r18
  public:
    Print() : write_error(0) {}
     8ae:	1b 82       	std	Y+3, r1	; 0x03
     8b0:	1a 82       	std	Y+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     8b2:	08 ee       	ldi	r16, 0xE8	; 232
     8b4:	13 e0       	ldi	r17, 0x03	; 3
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	0c 83       	std	Y+4, r16	; 0x04
     8bc:	1d 83       	std	Y+5, r17	; 0x05
     8be:	2e 83       	std	Y+6, r18	; 0x06
     8c0:	3f 83       	std	Y+7, r19	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
     8c2:	84 e3       	ldi	r24, 0x34	; 52
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	99 83       	std	Y+1, r25	; 0x01
     8c8:	88 83       	st	Y, r24
     8ca:	1c 8a       	std	Y+20, r1	; 0x14
     8cc:	1b 8a       	std	Y+19, r1	; 0x13
     8ce:	1e 8a       	std	Y+22, r1	; 0x16
     8d0:	1d 8a       	std	Y+21, r1	; 0x15
     8d2:	18 8e       	std	Y+24, r1	; 0x18
     8d4:	1f 8a       	std	Y+23, r1	; 0x17
     8d6:	1a 8e       	std	Y+26, r1	; 0x1a
     8d8:	19 8e       	std	Y+25, r1	; 0x19
     8da:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8dc:	8e 7f       	andi	r24, 0xFE	; 254
     8de:	50 fb       	bst	r21, 0
     8e0:	81 f9       	bld	r24, 1
     8e2:	8b 8f       	std	Y+27, r24	; 0x1b
{
  setTX(transmitPin);
     8e4:	64 2f       	mov	r22, r20
     8e6:	ce 01       	movw	r24, r28
     8e8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN14SoftwareSerial5setTXEh>
  setRX(receivePin);
     8ec:	6f 2d       	mov	r22, r15
     8ee:	ce 01       	movw	r24, r28
}
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	ff 90       	pop	r15
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
{
  setTX(transmitPin);
  setRX(receivePin);
     8fa:	0c 94 26 04 	jmp	0x84c	; 0x84c <_ZN14SoftwareSerial5setRXEh>

000008fe <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     908:	1a 8e       	std	Y+26, r1	; 0x1a
     90a:	19 8e       	std	Y+25, r1	; 0x19
     90c:	18 8e       	std	Y+24, r1	; 0x18
     90e:	1f 8a       	std	Y+23, r1	; 0x17
     910:	1e 8a       	std	Y+22, r1	; 0x16
     912:	1d 8a       	std	Y+21, r1	; 0x15
     914:	ac ea       	ldi	r26, 0xAC	; 172
     916:	b0 e0       	ldi	r27, 0x00	; 0

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
  {
    long baud = pgm_read_dword(&table[i].baud);
     91c:	fd 01       	movw	r30, r26
     91e:	05 91       	lpm	r16, Z+
     920:	15 91       	lpm	r17, Z+
     922:	25 91       	lpm	r18, Z+
     924:	34 91       	lpm	r19, Z
    if (baud == speed)
     926:	04 17       	cp	r16, r20
     928:	15 07       	cpc	r17, r21
     92a:	26 07       	cpc	r18, r22
     92c:	37 07       	cpc	r19, r23
     92e:	09 f0       	breq	.+2      	; 0x932 <_ZN14SoftwareSerial5beginEl+0x34>
     930:	31 c0       	rjmp	.+98     	; 0x994 <_ZN14SoftwareSerial5beginEl+0x96>
    {
      _rx_delay_centering = pgm_read_word(&table[i].rx_delay_centering);
     932:	2c e0       	ldi	r18, 0x0C	; 12
     934:	28 9f       	mul	r18, r24
     936:	f0 01       	movw	r30, r0
     938:	29 9f       	mul	r18, r25
     93a:	f0 0d       	add	r31, r0
     93c:	11 24       	eor	r1, r1
     93e:	e0 55       	subi	r30, 0x50	; 80
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	25 91       	lpm	r18, Z+
     944:	34 91       	lpm	r19, Z
     946:	3c 8b       	std	Y+20, r19	; 0x14
     948:	2b 8b       	std	Y+19, r18	; 0x13
      _rx_delay_intrabit = pgm_read_word(&table[i].rx_delay_intrabit);
     94a:	2c e0       	ldi	r18, 0x0C	; 12
     94c:	28 9f       	mul	r18, r24
     94e:	f0 01       	movw	r30, r0
     950:	29 9f       	mul	r18, r25
     952:	f0 0d       	add	r31, r0
     954:	11 24       	eor	r1, r1
     956:	ee 54       	subi	r30, 0x4E	; 78
     958:	ff 4f       	sbci	r31, 0xFF	; 255
     95a:	25 91       	lpm	r18, Z+
     95c:	34 91       	lpm	r19, Z
     95e:	3e 8b       	std	Y+22, r19	; 0x16
     960:	2d 8b       	std	Y+21, r18	; 0x15
      _rx_delay_stopbit = pgm_read_word(&table[i].rx_delay_stopbit);
     962:	2c e0       	ldi	r18, 0x0C	; 12
     964:	28 9f       	mul	r18, r24
     966:	f0 01       	movw	r30, r0
     968:	29 9f       	mul	r18, r25
     96a:	f0 0d       	add	r31, r0
     96c:	11 24       	eor	r1, r1
     96e:	ec 54       	subi	r30, 0x4C	; 76
     970:	ff 4f       	sbci	r31, 0xFF	; 255
     972:	25 91       	lpm	r18, Z+
     974:	34 91       	lpm	r19, Z
     976:	38 8f       	std	Y+24, r19	; 0x18
     978:	2f 8b       	std	Y+23, r18	; 0x17
      _tx_delay = pgm_read_word(&table[i].tx_delay);
     97a:	2c e0       	ldi	r18, 0x0C	; 12
     97c:	28 9f       	mul	r18, r24
     97e:	f0 01       	movw	r30, r0
     980:	29 9f       	mul	r18, r25
     982:	f0 0d       	add	r31, r0
     984:	11 24       	eor	r1, r1
     986:	ea 54       	subi	r30, 0x4A	; 74
     988:	ff 4f       	sbci	r31, 0xFF	; 255
     98a:	85 91       	lpm	r24, Z+
     98c:	94 91       	lpm	r25, Z
     98e:	9a 8f       	std	Y+26, r25	; 0x1a
     990:	89 8f       	std	Y+25, r24	; 0x19
      break;
     992:	08 c0       	rjmp	.+16     	; 0x9a4 <_ZN14SoftwareSerial5beginEl+0xa6>

void SoftwareSerial::begin(long speed)
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	1c 96       	adiw	r26, 0x0c	; 12
     998:	8d 30       	cpi	r24, 0x0D	; 13
     99a:	91 05       	cpc	r25, r1
     99c:	09 f0       	breq	.+2      	; 0x9a0 <_ZN14SoftwareSerial5beginEl+0xa2>
     99e:	be cf       	rjmp	.-132    	; 0x91c <_ZN14SoftwareSerial5beginEl+0x1e>
// Public methods
//

void SoftwareSerial::begin(long speed)
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     9a0:	1c 8a       	std	Y+20, r1	; 0x14
     9a2:	1b 8a       	std	Y+19, r1	; 0x13
      break;
    }
  }

  // Set up RX interrupts, but only if we have a valid RX baud rate
  if (_rx_delay_stopbit)
     9a4:	8f 89       	ldd	r24, Y+23	; 0x17
     9a6:	98 8d       	ldd	r25, Y+24	; 0x18
     9a8:	89 2b       	or	r24, r25
     9aa:	09 f4       	brne	.+2      	; 0x9ae <_ZN14SoftwareSerial5beginEl+0xb0>
     9ac:	47 c0       	rjmp	.+142    	; 0xa3c <_ZN14SoftwareSerial5beginEl+0x13e>
  {
    if (digitalPinToPCICR(_receivePin))
     9ae:	8c 85       	ldd	r24, Y+12	; 0x0c
     9b0:	98 ef       	ldi	r25, 0xF8	; 248
     9b2:	98 0f       	add	r25, r24
     9b4:	94 30       	cpi	r25, 0x04	; 4
     9b6:	38 f0       	brcs	.+14     	; 0x9c6 <_ZN14SoftwareSerial5beginEl+0xc8>
     9b8:	92 ef       	ldi	r25, 0xF2	; 242
     9ba:	98 0f       	add	r25, r24
     9bc:	94 30       	cpi	r25, 0x04	; 4
     9be:	18 f0       	brcs	.+6      	; 0x9c6 <_ZN14SoftwareSerial5beginEl+0xc8>
     9c0:	8a 51       	subi	r24, 0x1A	; 26
     9c2:	83 30       	cpi	r24, 0x03	; 3
     9c4:	b8 f5       	brcc	.+110    	; 0xa34 <_ZN14SoftwareSerial5beginEl+0x136>
    {
      *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     9c6:	80 91 68 00 	lds	r24, 0x0068
     9ca:	81 60       	ori	r24, 0x01	; 1
     9cc:	80 93 68 00 	sts	0x0068, r24
      *digitalPinToPCMSK(_receivePin) |= _BV(digitalPinToPCMSKbit(_receivePin));
     9d0:	8c 85       	ldd	r24, Y+12	; 0x0c
     9d2:	98 ef       	ldi	r25, 0xF8	; 248
     9d4:	98 0f       	add	r25, r24
     9d6:	94 30       	cpi	r25, 0x04	; 4
     9d8:	58 f0       	brcs	.+22     	; 0x9f0 <_ZN14SoftwareSerial5beginEl+0xf2>
     9da:	22 ef       	ldi	r18, 0xF2	; 242
     9dc:	28 0f       	add	r18, r24
     9de:	24 30       	cpi	r18, 0x04	; 4
     9e0:	38 f0       	brcs	.+14     	; 0x9f0 <_ZN14SoftwareSerial5beginEl+0xf2>
     9e2:	26 ee       	ldi	r18, 0xE6	; 230
     9e4:	28 0f       	add	r18, r24
     9e6:	23 30       	cpi	r18, 0x03	; 3
     9e8:	80 f5       	brcc	.+96     	; 0xa4a <_ZN14SoftwareSerial5beginEl+0x14c>
     9ea:	ab e6       	ldi	r26, 0x6B	; 107
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	2f c0       	rjmp	.+94     	; 0xa4e <_ZN14SoftwareSerial5beginEl+0x150>
     9f0:	ab e6       	ldi	r26, 0x6B	; 107
     9f2:	b0 e0       	ldi	r27, 0x00	; 0
     9f4:	eb e6       	ldi	r30, 0x6B	; 107
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	20 81       	ld	r18, Z
     9fa:	94 30       	cpi	r25, 0x04	; 4
     9fc:	10 f4       	brcc	.+4      	; 0xa02 <_ZN14SoftwareSerial5beginEl+0x104>
     9fe:	9c ef       	ldi	r25, 0xFC	; 252
     a00:	09 c0       	rjmp	.+18     	; 0xa14 <_ZN14SoftwareSerial5beginEl+0x116>
     a02:	8e 30       	cpi	r24, 0x0E	; 14
     a04:	71 f0       	breq	.+28     	; 0xa22 <_ZN14SoftwareSerial5beginEl+0x124>
     a06:	8f 30       	cpi	r24, 0x0F	; 15
     a08:	71 f0       	breq	.+28     	; 0xa26 <_ZN14SoftwareSerial5beginEl+0x128>
     a0a:	80 31       	cpi	r24, 0x10	; 16
     a0c:	71 f0       	breq	.+28     	; 0xa2a <_ZN14SoftwareSerial5beginEl+0x12c>
     a0e:	81 31       	cpi	r24, 0x11	; 17
     a10:	71 f0       	breq	.+28     	; 0xa2e <_ZN14SoftwareSerial5beginEl+0x130>
     a12:	9a ee       	ldi	r25, 0xEA	; 234
     a14:	98 0f       	add	r25, r24
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	01 c0       	rjmp	.+2      	; 0xa1c <_ZN14SoftwareSerial5beginEl+0x11e>
     a1a:	88 0f       	add	r24, r24
     a1c:	9a 95       	dec	r25
     a1e:	ea f7       	brpl	.-6      	; 0xa1a <_ZN14SoftwareSerial5beginEl+0x11c>
     a20:	07 c0       	rjmp	.+14     	; 0xa30 <_ZN14SoftwareSerial5beginEl+0x132>
     a22:	88 e0       	ldi	r24, 0x08	; 8
     a24:	05 c0       	rjmp	.+10     	; 0xa30 <_ZN14SoftwareSerial5beginEl+0x132>
     a26:	82 e0       	ldi	r24, 0x02	; 2
     a28:	03 c0       	rjmp	.+6      	; 0xa30 <_ZN14SoftwareSerial5beginEl+0x132>
     a2a:	84 e0       	ldi	r24, 0x04	; 4
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <_ZN14SoftwareSerial5beginEl+0x132>
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	82 2b       	or	r24, r18
     a32:	8c 93       	st	X, r24
    }
    tunedDelay(_tx_delay); // if we were low this establishes the end
     a34:	89 8d       	ldd	r24, Y+25	; 0x19
     a36:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a38:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN14SoftwareSerial10tunedDelayEj>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     a3c:	ce 01       	movw	r24, r28
}
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     a46:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <_ZN14SoftwareSerial6listenEv>
  if (_rx_delay_stopbit)
  {
    if (digitalPinToPCICR(_receivePin))
    {
      *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
      *digitalPinToPCMSK(_receivePin) |= _BV(digitalPinToPCMSKbit(_receivePin));
     a4a:	a0 e0       	ldi	r26, 0x00	; 0
     a4c:	b0 e0       	ldi	r27, 0x00	; 0
     a4e:	23 30       	cpi	r18, 0x03	; 3
     a50:	88 f2       	brcs	.-94     	; 0x9f4 <_ZN14SoftwareSerial5beginEl+0xf6>
     a52:	e0 e0       	ldi	r30, 0x00	; 0
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	d0 cf       	rjmp	.-96     	; 0x9f8 <_ZN14SoftwareSerial5beginEl+0xfa>

00000a58 <_ZN14SoftwareSerial3endEv>:
  listen();
}

void SoftwareSerial::end()
{
  if (digitalPinToPCMSK(_receivePin))
     a58:	fc 01       	movw	r30, r24
     a5a:	94 85       	ldd	r25, Z+12	; 0x0c
     a5c:	28 ef       	ldi	r18, 0xF8	; 248
     a5e:	29 0f       	add	r18, r25
     a60:	24 30       	cpi	r18, 0x04	; 4
     a62:	40 f0       	brcs	.+16     	; 0xa74 <_ZN14SoftwareSerial3endEv+0x1c>
     a64:	82 ef       	ldi	r24, 0xF2	; 242
     a66:	89 0f       	add	r24, r25
     a68:	84 30       	cpi	r24, 0x04	; 4
     a6a:	20 f0       	brcs	.+8      	; 0xa74 <_ZN14SoftwareSerial3endEv+0x1c>
     a6c:	86 ee       	ldi	r24, 0xE6	; 230
     a6e:	89 0f       	add	r24, r25
     a70:	83 30       	cpi	r24, 0x03	; 3
     a72:	18 f5       	brcc	.+70     	; 0xaba <_ZN14SoftwareSerial3endEv+0x62>
    *digitalPinToPCMSK(_receivePin) &= ~_BV(digitalPinToPCMSKbit(_receivePin));
     a74:	30 91 6b 00 	lds	r19, 0x006B
     a78:	24 30       	cpi	r18, 0x04	; 4
     a7a:	10 f4       	brcc	.+4      	; 0xa80 <_ZN14SoftwareSerial3endEv+0x28>
     a7c:	2c ef       	ldi	r18, 0xFC	; 252
     a7e:	09 c0       	rjmp	.+18     	; 0xa92 <_ZN14SoftwareSerial3endEv+0x3a>
     a80:	9e 30       	cpi	r25, 0x0E	; 14
     a82:	89 f0       	breq	.+34     	; 0xaa6 <_ZN14SoftwareSerial3endEv+0x4e>
     a84:	9f 30       	cpi	r25, 0x0F	; 15
     a86:	89 f0       	breq	.+34     	; 0xaaa <_ZN14SoftwareSerial3endEv+0x52>
     a88:	90 31       	cpi	r25, 0x10	; 16
     a8a:	89 f0       	breq	.+34     	; 0xaae <_ZN14SoftwareSerial3endEv+0x56>
     a8c:	91 31       	cpi	r25, 0x11	; 17
     a8e:	89 f0       	breq	.+34     	; 0xab2 <_ZN14SoftwareSerial3endEv+0x5a>
     a90:	2a ee       	ldi	r18, 0xEA	; 234
     a92:	29 0f       	add	r18, r25
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	02 2e       	mov	r0, r18
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <_ZN14SoftwareSerial3endEv+0x46>
     a9c:	88 0f       	add	r24, r24
     a9e:	0a 94       	dec	r0
     aa0:	ea f7       	brpl	.-6      	; 0xa9c <_ZN14SoftwareSerial3endEv+0x44>
     aa2:	80 95       	com	r24
     aa4:	07 c0       	rjmp	.+14     	; 0xab4 <_ZN14SoftwareSerial3endEv+0x5c>
     aa6:	87 ef       	ldi	r24, 0xF7	; 247
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <_ZN14SoftwareSerial3endEv+0x5c>
     aaa:	8d ef       	ldi	r24, 0xFD	; 253
     aac:	03 c0       	rjmp	.+6      	; 0xab4 <_ZN14SoftwareSerial3endEv+0x5c>
     aae:	8b ef       	ldi	r24, 0xFB	; 251
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <_ZN14SoftwareSerial3endEv+0x5c>
     ab2:	8e ef       	ldi	r24, 0xFE	; 254
     ab4:	83 23       	and	r24, r19
     ab6:	80 93 6b 00 	sts	0x006B, r24
     aba:	08 95       	ret

00000abc <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
     abc:	24 e3       	ldi	r18, 0x34	; 52
     abe:	31 e0       	ldi	r19, 0x01	; 1
     ac0:	fc 01       	movw	r30, r24
     ac2:	31 83       	std	Z+1, r19	; 0x01
     ac4:	20 83       	st	Z, r18
{
  end();
     ac6:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <_ZN14SoftwareSerial3endEv>

00000aca <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     aca:	61 32       	cpi	r22, 0x21	; 33
     acc:	98 f4       	brcc	.+38     	; 0xaf4 <twi_transmit+0x2a>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     ace:	20 91 3c 02 	lds	r18, 0x023C
     ad2:	24 30       	cpi	r18, 0x04	; 4
     ad4:	89 f4       	brne	.+34     	; 0xaf8 <twi_transmit+0x2e>
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     ad6:	60 93 f1 01 	sts	0x01F1, r22
     ada:	fc 01       	movw	r30, r24
     adc:	83 ef       	ldi	r24, 0xF3	; 243
     ade:	91 e0       	ldi	r25, 0x01	; 1
  for(i = 0; i < length; ++i){
     ae0:	dc 01       	movw	r26, r24
     ae2:	2a 2f       	mov	r18, r26
     ae4:	28 1b       	sub	r18, r24
     ae6:	26 17       	cp	r18, r22
     ae8:	18 f4       	brcc	.+6      	; 0xaf0 <twi_transmit+0x26>
    twi_txBuffer[i] = data[i];
     aea:	21 91       	ld	r18, Z+
     aec:	2d 93       	st	X+, r18
     aee:	f9 cf       	rjmp	.-14     	; 0xae2 <twi_transmit+0x18>
  }
  
  return 0;
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
     af8:	82 e0       	ldi	r24, 0x02	; 2
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
     afa:	08 95       	ret

00000afc <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     afc:	85 ed       	ldi	r24, 0xD5	; 213
     afe:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     b02:	80 91 bc 00 	lds	r24, 0x00BC
     b06:	84 fd       	sbrc	r24, 4
     b08:	fc cf       	rjmp	.-8      	; 0xb02 <__stack+0x3>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     b0a:	10 92 3c 02 	sts	0x023C, r1
     b0e:	08 95       	ret

00000b10 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     b10:	85 ec       	ldi	r24, 0xC5	; 197
     b12:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
     b16:	10 92 3c 02 	sts	0x023C, r1
     b1a:	08 95       	ret

00000b1c <__vector_36>:
}

ISR(TWI_vect)
{
     b1c:	1f 92       	push	r1
     b1e:	0f 92       	push	r0
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	0f 92       	push	r0
     b24:	11 24       	eor	r1, r1
     b26:	2f 93       	push	r18
     b28:	3f 93       	push	r19
     b2a:	4f 93       	push	r20
     b2c:	5f 93       	push	r21
     b2e:	6f 93       	push	r22
     b30:	7f 93       	push	r23
     b32:	8f 93       	push	r24
     b34:	9f 93       	push	r25
     b36:	af 93       	push	r26
     b38:	bf 93       	push	r27
     b3a:	ef 93       	push	r30
     b3c:	ff 93       	push	r31
  switch(TW_STATUS){
     b3e:	80 91 b9 00 	lds	r24, 0x00B9
     b42:	88 7f       	andi	r24, 0xF8	; 248
     b44:	80 36       	cpi	r24, 0x60	; 96
     b46:	09 f4       	brne	.+2      	; 0xb4a <__vector_36+0x2e>
     b48:	9c c0       	rjmp	.+312    	; 0xc82 <__vector_36+0x166>
     b4a:	68 f5       	brcc	.+90     	; 0xba6 <__vector_36+0x8a>
     b4c:	88 32       	cpi	r24, 0x28	; 40
     b4e:	09 f4       	brne	.+2      	; 0xb52 <__vector_36+0x36>
     b50:	5b c0       	rjmp	.+182    	; 0xc08 <__vector_36+0xec>
     b52:	90 f4       	brcc	.+36     	; 0xb78 <__vector_36+0x5c>
     b54:	80 31       	cpi	r24, 0x10	; 16
     b56:	09 f4       	brne	.+2      	; 0xb5a <__vector_36+0x3e>
     b58:	54 c0       	rjmp	.+168    	; 0xc02 <__vector_36+0xe6>
     b5a:	38 f4       	brcc	.+14     	; 0xb6a <__vector_36+0x4e>
     b5c:	88 23       	and	r24, r24
     b5e:	09 f4       	brne	.+2      	; 0xb62 <__vector_36+0x46>
     b60:	f5 c0       	rjmp	.+490    	; 0xd4c <__vector_36+0x230>
     b62:	88 30       	cpi	r24, 0x08	; 8
     b64:	09 f4       	brne	.+2      	; 0xb68 <__vector_36+0x4c>
     b66:	4d c0       	rjmp	.+154    	; 0xc02 <__vector_36+0xe6>
     b68:	f5 c0       	rjmp	.+490    	; 0xd54 <__vector_36+0x238>
     b6a:	88 31       	cpi	r24, 0x18	; 24
     b6c:	09 f4       	brne	.+2      	; 0xb70 <__vector_36+0x54>
     b6e:	4c c0       	rjmp	.+152    	; 0xc08 <__vector_36+0xec>
     b70:	80 32       	cpi	r24, 0x20	; 32
     b72:	09 f4       	brne	.+2      	; 0xb76 <__vector_36+0x5a>
     b74:	5d c0       	rjmp	.+186    	; 0xc30 <__vector_36+0x114>
     b76:	ee c0       	rjmp	.+476    	; 0xd54 <__vector_36+0x238>
     b78:	80 34       	cpi	r24, 0x40	; 64
     b7a:	09 f4       	brne	.+2      	; 0xb7e <__vector_36+0x62>
     b7c:	68 c0       	rjmp	.+208    	; 0xc4e <__vector_36+0x132>
     b7e:	48 f4       	brcc	.+18     	; 0xb92 <__vector_36+0x76>
     b80:	80 33       	cpi	r24, 0x30	; 48
     b82:	09 f4       	brne	.+2      	; 0xb86 <__vector_36+0x6a>
     b84:	55 c0       	rjmp	.+170    	; 0xc30 <__vector_36+0x114>
     b86:	88 33       	cpi	r24, 0x38	; 56
     b88:	09 f0       	breq	.+2      	; 0xb8c <__vector_36+0x70>
     b8a:	e4 c0       	rjmp	.+456    	; 0xd54 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     b8c:	80 93 cf 01 	sts	0x01CF, r24
     b90:	a8 c0       	rjmp	.+336    	; 0xce2 <__vector_36+0x1c6>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     b92:	80 35       	cpi	r24, 0x50	; 80
     b94:	09 f4       	brne	.+2      	; 0xb98 <__vector_36+0x7c>
     b96:	4f c0       	rjmp	.+158    	; 0xc36 <__vector_36+0x11a>
     b98:	88 35       	cpi	r24, 0x58	; 88
     b9a:	09 f4       	brne	.+2      	; 0xb9e <__vector_36+0x82>
     b9c:	5d c0       	rjmp	.+186    	; 0xc58 <__vector_36+0x13c>
     b9e:	88 34       	cpi	r24, 0x48	; 72
     ba0:	09 f0       	breq	.+2      	; 0xba4 <__vector_36+0x88>
     ba2:	d8 c0       	rjmp	.+432    	; 0xd54 <__vector_36+0x238>
     ba4:	d5 c0       	rjmp	.+426    	; 0xd50 <__vector_36+0x234>
     ba6:	88 39       	cpi	r24, 0x98	; 152
     ba8:	09 f4       	brne	.+2      	; 0xbac <__vector_36+0x90>
     baa:	c6 c0       	rjmp	.+396    	; 0xd38 <__vector_36+0x21c>
     bac:	a8 f4       	brcc	.+42     	; 0xbd8 <__vector_36+0xbc>
     bae:	88 37       	cpi	r24, 0x78	; 120
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <__vector_36+0x98>
     bb2:	67 c0       	rjmp	.+206    	; 0xc82 <__vector_36+0x166>
     bb4:	38 f4       	brcc	.+14     	; 0xbc4 <__vector_36+0xa8>
     bb6:	88 36       	cpi	r24, 0x68	; 104
     bb8:	09 f4       	brne	.+2      	; 0xbbc <__vector_36+0xa0>
     bba:	63 c0       	rjmp	.+198    	; 0xc82 <__vector_36+0x166>
     bbc:	80 37       	cpi	r24, 0x70	; 112
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__vector_36+0xa6>
     bc0:	60 c0       	rjmp	.+192    	; 0xc82 <__vector_36+0x166>
     bc2:	c8 c0       	rjmp	.+400    	; 0xd54 <__vector_36+0x238>
     bc4:	88 38       	cpi	r24, 0x88	; 136
     bc6:	09 f4       	brne	.+2      	; 0xbca <__vector_36+0xae>
     bc8:	b7 c0       	rjmp	.+366    	; 0xd38 <__vector_36+0x21c>
     bca:	80 39       	cpi	r24, 0x90	; 144
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <__vector_36+0xb4>
     bce:	5f c0       	rjmp	.+190    	; 0xc8e <__vector_36+0x172>
     bd0:	80 38       	cpi	r24, 0x80	; 128
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <__vector_36+0xba>
     bd4:	bf c0       	rjmp	.+382    	; 0xd54 <__vector_36+0x238>
     bd6:	5b c0       	rjmp	.+182    	; 0xc8e <__vector_36+0x172>
     bd8:	80 3b       	cpi	r24, 0xB0	; 176
     bda:	09 f4       	brne	.+2      	; 0xbde <__vector_36+0xc2>
     bdc:	85 c0       	rjmp	.+266    	; 0xce8 <__vector_36+0x1cc>
     bde:	38 f4       	brcc	.+14     	; 0xbee <__vector_36+0xd2>
     be0:	80 3a       	cpi	r24, 0xA0	; 160
     be2:	09 f4       	brne	.+2      	; 0xbe6 <__vector_36+0xca>
     be4:	66 c0       	rjmp	.+204    	; 0xcb2 <__vector_36+0x196>
     be6:	88 3a       	cpi	r24, 0xA8	; 168
     be8:	09 f4       	brne	.+2      	; 0xbec <__vector_36+0xd0>
     bea:	7e c0       	rjmp	.+252    	; 0xce8 <__vector_36+0x1cc>
     bec:	b3 c0       	rjmp	.+358    	; 0xd54 <__vector_36+0x238>
     bee:	80 3c       	cpi	r24, 0xC0	; 192
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <__vector_36+0xd8>
     bf2:	a6 c0       	rjmp	.+332    	; 0xd40 <__vector_36+0x224>
     bf4:	88 3c       	cpi	r24, 0xC8	; 200
     bf6:	09 f4       	brne	.+2      	; 0xbfa <__vector_36+0xde>
     bf8:	a3 c0       	rjmp	.+326    	; 0xd40 <__vector_36+0x224>
     bfa:	88 3b       	cpi	r24, 0xB8	; 184
     bfc:	09 f4       	brne	.+2      	; 0xc00 <__vector_36+0xe4>
     bfe:	89 c0       	rjmp	.+274    	; 0xd12 <__vector_36+0x1f6>
     c00:	a9 c0       	rjmp	.+338    	; 0xd54 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     c02:	80 91 3b 02 	lds	r24, 0x023B
     c06:	10 c0       	rjmp	.+32     	; 0xc28 <__vector_36+0x10c>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     c08:	90 91 14 02 	lds	r25, 0x0214
     c0c:	80 91 13 02 	lds	r24, 0x0213
     c10:	98 17       	cp	r25, r24
     c12:	70 f5       	brcc	.+92     	; 0xc70 <__vector_36+0x154>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     c14:	e0 91 14 02 	lds	r30, 0x0214
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	8e 0f       	add	r24, r30
     c1c:	80 93 14 02 	sts	0x0214, r24
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	eb 5e       	subi	r30, 0xEB	; 235
     c24:	fd 4f       	sbci	r31, 0xFD	; 253
     c26:	80 81       	ld	r24, Z
     c28:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     c2c:	85 ec       	ldi	r24, 0xC5	; 197
     c2e:	85 c0       	rjmp	.+266    	; 0xd3a <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     c30:	80 93 cf 01 	sts	0x01CF, r24
     c34:	8d c0       	rjmp	.+282    	; 0xd50 <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     c36:	e0 91 14 02 	lds	r30, 0x0214
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	8e 0f       	add	r24, r30
     c3e:	80 93 14 02 	sts	0x0214, r24
     c42:	80 91 bb 00 	lds	r24, 0x00BB
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	eb 5e       	subi	r30, 0xEB	; 235
     c4a:	fd 4f       	sbci	r31, 0xFD	; 253
     c4c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     c4e:	90 91 14 02 	lds	r25, 0x0214
     c52:	80 91 13 02 	lds	r24, 0x0213
     c56:	6d c0       	rjmp	.+218    	; 0xd32 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     c58:	e0 91 14 02 	lds	r30, 0x0214
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	8e 0f       	add	r24, r30
     c60:	80 93 14 02 	sts	0x0214, r24
     c64:	80 91 bb 00 	lds	r24, 0x00BB
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	eb 5e       	subi	r30, 0xEB	; 235
     c6c:	fd 4f       	sbci	r31, 0xFD	; 253
     c6e:	80 83       	st	Z, r24
	if (twi_sendStop)
     c70:	80 91 3a 02 	lds	r24, 0x023A
     c74:	81 11       	cpse	r24, r1
     c76:	6c c0       	rjmp	.+216    	; 0xd50 <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	80 93 39 02 	sts	0x0239, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     c7e:	84 ea       	ldi	r24, 0xA4	; 164
     c80:	60 c0       	rjmp	.+192    	; 0xd42 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     c82:	83 e0       	ldi	r24, 0x03	; 3
     c84:	80 93 3c 02 	sts	0x023C, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     c88:	10 92 d0 01 	sts	0x01D0, r1
     c8c:	cf cf       	rjmp	.-98     	; 0xc2c <__vector_36+0x110>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     c8e:	80 91 d0 01 	lds	r24, 0x01D0
     c92:	80 32       	cpi	r24, 0x20	; 32
     c94:	08 f0       	brcs	.+2      	; 0xc98 <__vector_36+0x17c>
     c96:	50 c0       	rjmp	.+160    	; 0xd38 <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     c98:	e0 91 d0 01 	lds	r30, 0x01D0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	8e 0f       	add	r24, r30
     ca0:	80 93 d0 01 	sts	0x01D0, r24
     ca4:	80 91 bb 00 	lds	r24, 0x00BB
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	ef 52       	subi	r30, 0x2F	; 47
     cac:	fe 4f       	sbci	r31, 0xFE	; 254
     cae:	80 83       	st	Z, r24
     cb0:	bd cf       	rjmp	.-134    	; 0xc2c <__vector_36+0x110>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     cb2:	80 91 d0 01 	lds	r24, 0x01D0
     cb6:	80 32       	cpi	r24, 0x20	; 32
     cb8:	30 f4       	brcc	.+12     	; 0xcc6 <__vector_36+0x1aa>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     cba:	e0 91 d0 01 	lds	r30, 0x01D0
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	ef 52       	subi	r30, 0x2F	; 47
     cc2:	fe 4f       	sbci	r31, 0xFE	; 254
     cc4:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
     cc6:	0e 94 7e 05 	call	0xafc	; 0xafc <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     cca:	60 91 d0 01 	lds	r22, 0x01D0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	e0 91 35 02 	lds	r30, 0x0235
     cd4:	f0 91 36 02 	lds	r31, 0x0236
     cd8:	81 ed       	ldi	r24, 0xD1	; 209
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     cde:	10 92 d0 01 	sts	0x01D0, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     ce2:	0e 94 88 05 	call	0xb10	; 0xb10 <twi_releaseBus>
      break;
     ce6:	36 c0       	rjmp	.+108    	; 0xd54 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     ce8:	84 e0       	ldi	r24, 0x04	; 4
     cea:	80 93 3c 02 	sts	0x023C, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     cee:	10 92 f2 01 	sts	0x01F2, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     cf2:	10 92 f1 01 	sts	0x01F1, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     cf6:	e0 91 37 02 	lds	r30, 0x0237
     cfa:	f0 91 38 02 	lds	r31, 0x0238
     cfe:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     d00:	80 91 f1 01 	lds	r24, 0x01F1
     d04:	81 11       	cpse	r24, r1
     d06:	05 c0       	rjmp	.+10     	; 0xd12 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	80 93 f1 01 	sts	0x01F1, r24
        twi_txBuffer[0] = 0x00;
     d0e:	10 92 f3 01 	sts	0x01F3, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     d12:	e0 91 f2 01 	lds	r30, 0x01F2
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	8e 0f       	add	r24, r30
     d1a:	80 93 f2 01 	sts	0x01F2, r24
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	ed 50       	subi	r30, 0x0D	; 13
     d22:	fe 4f       	sbci	r31, 0xFE	; 254
     d24:	80 81       	ld	r24, Z
     d26:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     d2a:	90 91 f2 01 	lds	r25, 0x01F2
     d2e:	80 91 f1 01 	lds	r24, 0x01F1
     d32:	98 17       	cp	r25, r24
     d34:	08 f4       	brcc	.+2      	; 0xd38 <__vector_36+0x21c>
     d36:	7a cf       	rjmp	.-268    	; 0xc2c <__vector_36+0x110>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     d38:	85 e8       	ldi	r24, 0x85	; 133
     d3a:	80 93 bc 00 	sts	0x00BC, r24
     d3e:	0a c0       	rjmp	.+20     	; 0xd54 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     d40:	85 ec       	ldi	r24, 0xC5	; 197
     d42:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     d46:	10 92 3c 02 	sts	0x023C, r1
      break;
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     d4c:	10 92 cf 01 	sts	0x01CF, r1
      twi_stop();
     d50:	0e 94 7e 05 	call	0xafc	; 0xafc <twi_stop>
      break;
  }
}
     d54:	ff 91       	pop	r31
     d56:	ef 91       	pop	r30
     d58:	bf 91       	pop	r27
     d5a:	af 91       	pop	r26
     d5c:	9f 91       	pop	r25
     d5e:	8f 91       	pop	r24
     d60:	7f 91       	pop	r23
     d62:	6f 91       	pop	r22
     d64:	5f 91       	pop	r21
     d66:	4f 91       	pop	r20
     d68:	3f 91       	pop	r19
     d6a:	2f 91       	pop	r18
     d6c:	0f 90       	pop	r0
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	0f 90       	pop	r0
     d72:	1f 90       	pop	r1
     d74:	18 95       	reti

00000d76 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     d76:	80 91 6c 02 	lds	r24, 0x026C
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	20 91 6d 02 	lds	r18, 0x026D
}
     d80:	82 1b       	sub	r24, r18
     d82:	91 09       	sbc	r25, r1
     d84:	08 95       	ret

00000d86 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     d86:	20 91 6d 02 	lds	r18, 0x026D
     d8a:	80 91 6c 02 	lds	r24, 0x026C
     d8e:	28 17       	cp	r18, r24
     d90:	50 f4       	brcc	.+20     	; 0xda6 <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
     d92:	e2 2f       	mov	r30, r18
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	e2 59       	subi	r30, 0x92	; 146
     d98:	fd 4f       	sbci	r31, 0xFD	; 253
     d9a:	80 81       	ld	r24, Z
     d9c:	90 e0       	ldi	r25, 0x00	; 0
    ++rxBufferIndex;
     d9e:	2f 5f       	subi	r18, 0xFF	; 255
     da0:	20 93 6d 02 	sts	0x026D, r18
     da4:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     da6:	8f ef       	ldi	r24, 0xFF	; 255
     da8:	9f ef       	ldi	r25, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
     daa:	08 95       	ret

00000dac <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
     dac:	e0 91 6d 02 	lds	r30, 0x026D
     db0:	80 91 6c 02 	lds	r24, 0x026C
     db4:	e8 17       	cp	r30, r24
     db6:	30 f4       	brcc	.+12     	; 0xdc4 <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	e2 59       	subi	r30, 0x92	; 146
     dbc:	fd 4f       	sbci	r31, 0xFD	; 253
     dbe:	80 81       	ld	r24, Z
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     dc4:	8f ef       	ldi	r24, 0xFF	; 255
     dc6:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     dc8:	08 95       	ret

00000dca <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
     dca:	08 95       	ret

00000dcc <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     dcc:	cf 92       	push	r12
     dce:	df 92       	push	r13
     dd0:	ef 92       	push	r14
     dd2:	ff 92       	push	r15
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	7c 01       	movw	r14, r24
     dde:	cb 01       	movw	r24, r22
     de0:	8a 01       	movw	r16, r20
  if(transmitting){
     de2:	20 91 49 02 	lds	r18, 0x0249
     de6:	22 23       	and	r18, r18
     de8:	89 f0       	breq	.+34     	; 0xe0c <_ZN7TwoWire5writeEPKhj+0x40>
     dea:	eb 01       	movw	r28, r22
     dec:	6b 01       	movw	r12, r22
     dee:	c4 0e       	add	r12, r20
     df0:	d5 1e       	adc	r13, r21
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     df2:	cc 15       	cp	r28, r12
     df4:	dd 05       	cpc	r29, r13
     df6:	69 f0       	breq	.+26     	; 0xe12 <_ZN7TwoWire5writeEPKhj+0x46>
      write(data[i]);
     df8:	69 91       	ld	r22, Y+
     dfa:	d7 01       	movw	r26, r14
     dfc:	ed 91       	ld	r30, X+
     dfe:	fc 91       	ld	r31, X
     e00:	01 90       	ld	r0, Z+
     e02:	f0 81       	ld	r31, Z
     e04:	e0 2d       	mov	r30, r0
     e06:	c7 01       	movw	r24, r14
     e08:	09 95       	icall
     e0a:	f3 cf       	rjmp	.-26     	; 0xdf2 <_ZN7TwoWire5writeEPKhj+0x26>
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     e0c:	64 2f       	mov	r22, r20
     e0e:	0e 94 65 05 	call	0xaca	; 0xaca <twi_transmit>
  }
  return quantity;
}
     e12:	c8 01       	movw	r24, r16
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	df 90       	pop	r13
     e22:	cf 90       	pop	r12
     e24:	08 95       	ret

00000e26 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	1f 92       	push	r1
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
     e32:	20 91 49 02 	lds	r18, 0x0249
     e36:	22 23       	and	r18, r18
     e38:	d1 f0       	breq	.+52     	; 0xe6e <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     e3a:	20 91 4a 02 	lds	r18, 0x024A
     e3e:	20 32       	cpi	r18, 0x20	; 32
     e40:	40 f0       	brcs	.+16     	; 0xe52 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     e42:	21 e0       	ldi	r18, 0x01	; 1
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	fc 01       	movw	r30, r24
     e48:	33 83       	std	Z+3, r19	; 0x03
     e4a:	22 83       	std	Z+2, r18	; 0x02
      setWriteError();
      return 0;
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	15 c0       	rjmp	.+42     	; 0xe7c <_ZN7TwoWire5writeEh+0x56>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     e52:	80 91 4b 02 	lds	r24, 0x024B
     e56:	e8 2f       	mov	r30, r24
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	e4 5b       	subi	r30, 0xB4	; 180
     e5c:	fd 4f       	sbci	r31, 0xFD	; 253
     e5e:	99 81       	ldd	r25, Y+1	; 0x01
     e60:	90 83       	st	Z, r25
    ++txBufferIndex;
     e62:	8f 5f       	subi	r24, 0xFF	; 255
     e64:	80 93 4b 02 	sts	0x024B, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     e68:	80 93 4a 02 	sts	0x024A, r24
     e6c:	05 c0       	rjmp	.+10     	; 0xe78 <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     e6e:	61 e0       	ldi	r22, 0x01	; 1
     e70:	ce 01       	movw	r24, r28
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	0e 94 65 05 	call	0xaca	; 0xaca <twi_transmit>
  }
  return 1;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
}
     e7c:	0f 90       	pop	r0
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	08 95       	ret

00000e84 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
     e84:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
     e86:	13 82       	std	Z+3, r1	; 0x03
     e88:	12 82       	std	Z+2, r1	; 0x02
     e8a:	48 ee       	ldi	r20, 0xE8	; 232
     e8c:	53 e0       	ldi	r21, 0x03	; 3
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	44 83       	std	Z+4, r20	; 0x04
     e94:	55 83       	std	Z+5, r21	; 0x05
     e96:	66 83       	std	Z+6, r22	; 0x06
     e98:	77 83       	std	Z+7, r23	; 0x07
     e9a:	84 e4       	ldi	r24, 0x44	; 68
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	91 83       	std	Z+1, r25	; 0x01
     ea0:	80 83       	st	Z, r24
     ea2:	08 95       	ret

00000ea4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     ea4:	8d e3       	ldi	r24, 0x3D	; 61
     ea6:	92 e0       	ldi	r25, 0x02	; 2
     ea8:	0c 94 42 07 	jmp	0xe84	; 0xe84 <_ZN7TwoWireC1Ev>

00000eac <__vector_23>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
     eac:	1f 92       	push	r1
     eae:	0f 92       	push	r0
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	0f 92       	push	r0
     eb4:	11 24       	eor	r1, r1
     eb6:	2f 93       	push	r18
     eb8:	3f 93       	push	r19
     eba:	8f 93       	push	r24
     ebc:	9f 93       	push	r25
     ebe:	af 93       	push	r26
     ec0:	bf 93       	push	r27
     ec2:	80 91 92 02 	lds	r24, 0x0292
     ec6:	90 91 93 02 	lds	r25, 0x0293
     eca:	a0 91 94 02 	lds	r26, 0x0294
     ece:	b0 91 95 02 	lds	r27, 0x0295
     ed2:	30 91 96 02 	lds	r19, 0x0296
     ed6:	01 96       	adiw	r24, 0x01	; 1
     ed8:	a1 1d       	adc	r26, r1
     eda:	b1 1d       	adc	r27, r1
     edc:	23 2f       	mov	r18, r19
     ede:	2d 5f       	subi	r18, 0xFD	; 253
     ee0:	2d 37       	cpi	r18, 0x7D	; 125
     ee2:	20 f0       	brcs	.+8      	; 0xeec <__vector_23+0x40>
     ee4:	2d 57       	subi	r18, 0x7D	; 125
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	a1 1d       	adc	r26, r1
     eea:	b1 1d       	adc	r27, r1
     eec:	20 93 96 02 	sts	0x0296, r18
     ef0:	80 93 92 02 	sts	0x0292, r24
     ef4:	90 93 93 02 	sts	0x0293, r25
     ef8:	a0 93 94 02 	sts	0x0294, r26
     efc:	b0 93 95 02 	sts	0x0295, r27
     f00:	80 91 8e 02 	lds	r24, 0x028E
     f04:	90 91 8f 02 	lds	r25, 0x028F
     f08:	a0 91 90 02 	lds	r26, 0x0290
     f0c:	b0 91 91 02 	lds	r27, 0x0291
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	a1 1d       	adc	r26, r1
     f14:	b1 1d       	adc	r27, r1
     f16:	80 93 8e 02 	sts	0x028E, r24
     f1a:	90 93 8f 02 	sts	0x028F, r25
     f1e:	a0 93 90 02 	sts	0x0290, r26
     f22:	b0 93 91 02 	sts	0x0291, r27
     f26:	bf 91       	pop	r27
     f28:	af 91       	pop	r26
     f2a:	9f 91       	pop	r25
     f2c:	8f 91       	pop	r24
     f2e:	3f 91       	pop	r19
     f30:	2f 91       	pop	r18
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	0f 90       	pop	r0
     f38:	1f 90       	pop	r1
     f3a:	18 95       	reti

00000f3c <delay>:
     f3c:	9b 01       	movw	r18, r22
     f3e:	ac 01       	movw	r20, r24
     f40:	7f b7       	in	r23, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	80 91 8e 02 	lds	r24, 0x028E
     f48:	90 91 8f 02 	lds	r25, 0x028F
     f4c:	a0 91 90 02 	lds	r26, 0x0290
     f50:	b0 91 91 02 	lds	r27, 0x0291
     f54:	66 b5       	in	r22, 0x26	; 38
     f56:	a8 9b       	sbis	0x15, 0	; 21
     f58:	05 c0       	rjmp	.+10     	; 0xf64 <delay+0x28>
     f5a:	6f 3f       	cpi	r22, 0xFF	; 255
     f5c:	19 f0       	breq	.+6      	; 0xf64 <delay+0x28>
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	a1 1d       	adc	r26, r1
     f62:	b1 1d       	adc	r27, r1
     f64:	7f bf       	out	0x3f, r23	; 63
     f66:	ba 2f       	mov	r27, r26
     f68:	a9 2f       	mov	r26, r25
     f6a:	98 2f       	mov	r25, r24
     f6c:	88 27       	eor	r24, r24
     f6e:	86 0f       	add	r24, r22
     f70:	91 1d       	adc	r25, r1
     f72:	a1 1d       	adc	r26, r1
     f74:	b1 1d       	adc	r27, r1
     f76:	62 e0       	ldi	r22, 0x02	; 2
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	aa 1f       	adc	r26, r26
     f7e:	bb 1f       	adc	r27, r27
     f80:	6a 95       	dec	r22
     f82:	d1 f7       	brne	.-12     	; 0xf78 <delay+0x3c>
     f84:	bc 01       	movw	r22, r24
     f86:	2d c0       	rjmp	.+90     	; 0xfe2 <delay+0xa6>
     f88:	ff b7       	in	r31, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	80 91 8e 02 	lds	r24, 0x028E
     f90:	90 91 8f 02 	lds	r25, 0x028F
     f94:	a0 91 90 02 	lds	r26, 0x0290
     f98:	b0 91 91 02 	lds	r27, 0x0291
     f9c:	e6 b5       	in	r30, 0x26	; 38
     f9e:	a8 9b       	sbis	0x15, 0	; 21
     fa0:	05 c0       	rjmp	.+10     	; 0xfac <delay+0x70>
     fa2:	ef 3f       	cpi	r30, 0xFF	; 255
     fa4:	19 f0       	breq	.+6      	; 0xfac <delay+0x70>
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	a1 1d       	adc	r26, r1
     faa:	b1 1d       	adc	r27, r1
     fac:	ff bf       	out	0x3f, r31	; 63
     fae:	ba 2f       	mov	r27, r26
     fb0:	a9 2f       	mov	r26, r25
     fb2:	98 2f       	mov	r25, r24
     fb4:	88 27       	eor	r24, r24
     fb6:	8e 0f       	add	r24, r30
     fb8:	91 1d       	adc	r25, r1
     fba:	a1 1d       	adc	r26, r1
     fbc:	b1 1d       	adc	r27, r1
     fbe:	e2 e0       	ldi	r30, 0x02	; 2
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	aa 1f       	adc	r26, r26
     fc6:	bb 1f       	adc	r27, r27
     fc8:	ea 95       	dec	r30
     fca:	d1 f7       	brne	.-12     	; 0xfc0 <delay+0x84>
     fcc:	86 1b       	sub	r24, r22
     fce:	97 0b       	sbc	r25, r23
     fd0:	88 5e       	subi	r24, 0xE8	; 232
     fd2:	93 40       	sbci	r25, 0x03	; 3
     fd4:	c8 f2       	brcs	.-78     	; 0xf88 <delay+0x4c>
     fd6:	21 50       	subi	r18, 0x01	; 1
     fd8:	30 40       	sbci	r19, 0x00	; 0
     fda:	40 40       	sbci	r20, 0x00	; 0
     fdc:	50 40       	sbci	r21, 0x00	; 0
     fde:	68 51       	subi	r22, 0x18	; 24
     fe0:	7c 4f       	sbci	r23, 0xFC	; 252
     fe2:	21 15       	cp	r18, r1
     fe4:	31 05       	cpc	r19, r1
     fe6:	41 05       	cpc	r20, r1
     fe8:	51 05       	cpc	r21, r1
     fea:	71 f6       	brne	.-100    	; 0xf88 <delay+0x4c>
     fec:	08 95       	ret

00000fee <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     fee:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     ff0:	84 b5       	in	r24, 0x24	; 36
     ff2:	82 60       	ori	r24, 0x02	; 2
     ff4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     ff6:	84 b5       	in	r24, 0x24	; 36
     ff8:	81 60       	ori	r24, 0x01	; 1
     ffa:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     ffc:	85 b5       	in	r24, 0x25	; 37
     ffe:	82 60       	ori	r24, 0x02	; 2
    1000:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1002:	85 b5       	in	r24, 0x25	; 37
    1004:	81 60       	ori	r24, 0x01	; 1
    1006:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1008:	ee e6       	ldi	r30, 0x6E	; 110
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	81 60       	ori	r24, 0x01	; 1
    1010:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1012:	e1 e8       	ldi	r30, 0x81	; 129
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1018:	80 81       	ld	r24, Z
    101a:	82 60       	ori	r24, 0x02	; 2
    101c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    101e:	80 81       	ld	r24, Z
    1020:	81 60       	ori	r24, 0x01	; 1
    1022:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1024:	e0 e8       	ldi	r30, 0x80	; 128
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	81 60       	ori	r24, 0x01	; 1
    102c:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    102e:	e1 e9       	ldi	r30, 0x91	; 145
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	82 60       	ori	r24, 0x02	; 2
    1036:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1038:	80 81       	ld	r24, Z
    103a:	81 60       	ori	r24, 0x01	; 1
    103c:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    103e:	e0 e9       	ldi	r30, 0x90	; 144
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	81 60       	ori	r24, 0x01	; 1
    1046:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    1048:	e1 ec       	ldi	r30, 0xC1	; 193
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	84 60       	ori	r24, 0x04	; 4
    1050:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    1052:	80 81       	ld	r24, Z
    1054:	82 60       	ori	r24, 0x02	; 2
    1056:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1058:	80 81       	ld	r24, Z
    105a:	81 60       	ori	r24, 0x01	; 1
    105c:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    105e:	e3 ec       	ldi	r30, 0xC3	; 195
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	81 60       	ori	r24, 0x01	; 1
    1066:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    1068:	e0 ec       	ldi	r30, 0xC0	; 192
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	82 60       	ori	r24, 0x02	; 2
    1070:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    1072:	e2 ec       	ldi	r30, 0xC2	; 194
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	81 60       	ori	r24, 0x01	; 1
    107a:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    107c:	ea e7       	ldi	r30, 0x7A	; 122
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	84 60       	ori	r24, 0x04	; 4
    1084:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1086:	80 81       	ld	r24, Z
    1088:	82 60       	ori	r24, 0x02	; 2
    108a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    108c:	80 81       	ld	r24, Z
    108e:	81 60       	ori	r24, 0x01	; 1
    1090:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1092:	80 81       	ld	r24, Z
    1094:	80 68       	ori	r24, 0x80	; 128
    1096:	80 83       	st	Z, r24
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
#endif
}
    1098:	08 95       	ret

0000109a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    109e:	48 2f       	mov	r20, r24
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	ca 01       	movw	r24, r20
    10a4:	80 57       	subi	r24, 0x70	; 112
    10a6:	9e 4f       	sbci	r25, 0xFE	; 254
    10a8:	fc 01       	movw	r30, r24
    10aa:	34 91       	lpm	r19, Z
	uint8_t port = digitalPinToPort(pin);
    10ac:	4e 58       	subi	r20, 0x8E	; 142
    10ae:	5e 4f       	sbci	r21, 0xFE	; 254
    10b0:	fa 01       	movw	r30, r20
    10b2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    10b4:	88 23       	and	r24, r24
    10b6:	69 f1       	breq	.+90     	; 0x1112 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	fc 01       	movw	r30, r24
    10c0:	e8 5b       	subi	r30, 0xB8	; 184
    10c2:	fe 4f       	sbci	r31, 0xFE	; 254
    10c4:	a5 91       	lpm	r26, Z+
    10c6:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    10c8:	fc 01       	movw	r30, r24
    10ca:	ea 5a       	subi	r30, 0xAA	; 170
    10cc:	fe 4f       	sbci	r31, 0xFE	; 254
    10ce:	c5 91       	lpm	r28, Z+
    10d0:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    10d2:	66 23       	and	r22, r22
    10d4:	51 f4       	brne	.+20     	; 0x10ea <pinMode+0x50>
		uint8_t oldSREG = SREG;
    10d6:	2f b7       	in	r18, 0x3f	; 63
                cli();
    10d8:	f8 94       	cli
		*reg &= ~bit;
    10da:	8c 91       	ld	r24, X
    10dc:	93 2f       	mov	r25, r19
    10de:	90 95       	com	r25
    10e0:	89 23       	and	r24, r25
    10e2:	8c 93       	st	X, r24
		*out &= ~bit;
    10e4:	88 81       	ld	r24, Y
    10e6:	89 23       	and	r24, r25
    10e8:	0b c0       	rjmp	.+22     	; 0x1100 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    10ea:	62 30       	cpi	r22, 0x02	; 2
    10ec:	61 f4       	brne	.+24     	; 0x1106 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    10ee:	2f b7       	in	r18, 0x3f	; 63
                cli();
    10f0:	f8 94       	cli
		*reg &= ~bit;
    10f2:	8c 91       	ld	r24, X
    10f4:	93 2f       	mov	r25, r19
    10f6:	90 95       	com	r25
    10f8:	89 23       	and	r24, r25
    10fa:	8c 93       	st	X, r24
		*out |= bit;
    10fc:	88 81       	ld	r24, Y
    10fe:	83 2b       	or	r24, r19
    1100:	88 83       	st	Y, r24
		SREG = oldSREG;
    1102:	2f bf       	out	0x3f, r18	; 63
    1104:	06 c0       	rjmp	.+12     	; 0x1112 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    1106:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1108:	f8 94       	cli
		*reg |= bit;
    110a:	8c 91       	ld	r24, X
    110c:	83 2b       	or	r24, r19
    110e:	8c 93       	st	X, r24
		SREG = oldSREG;
    1110:	9f bf       	out	0x3f, r25	; 63
	}
}
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	08 95       	ret

00001118 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1118:	88 30       	cpi	r24, 0x08	; 8
    111a:	71 f1       	breq	.+92     	; 0x1178 <turnOffPWM+0x60>
    111c:	89 30       	cpi	r24, 0x09	; 9
    111e:	68 f4       	brcc	.+26     	; 0x113a <turnOffPWM+0x22>
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	31 f1       	breq	.+76     	; 0x1170 <turnOffPWM+0x58>
    1124:	83 30       	cpi	r24, 0x03	; 3
    1126:	20 f4       	brcc	.+8      	; 0x1130 <turnOffPWM+0x18>
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	09 f0       	breq	.+2      	; 0x112e <turnOffPWM+0x16>
    112c:	42 c0       	rjmp	.+132    	; 0x11b2 <turnOffPWM+0x9a>
    112e:	1d c0       	rjmp	.+58     	; 0x116a <turnOffPWM+0x52>
    1130:	83 30       	cpi	r24, 0x03	; 3
    1132:	89 f0       	breq	.+34     	; 0x1156 <turnOffPWM+0x3e>
    1134:	84 30       	cpi	r24, 0x04	; 4
    1136:	e9 f5       	brne	.+122    	; 0x11b2 <turnOffPWM+0x9a>
    1138:	12 c0       	rjmp	.+36     	; 0x115e <turnOffPWM+0x46>
    113a:	8b 30       	cpi	r24, 0x0B	; 11
    113c:	59 f1       	breq	.+86     	; 0x1194 <turnOffPWM+0x7c>
    113e:	8c 30       	cpi	r24, 0x0C	; 12
    1140:	28 f4       	brcc	.+10     	; 0x114c <turnOffPWM+0x34>
    1142:	89 30       	cpi	r24, 0x09	; 9
    1144:	e9 f0       	breq	.+58     	; 0x1180 <turnOffPWM+0x68>
    1146:	8a 30       	cpi	r24, 0x0A	; 10
    1148:	a1 f5       	brne	.+104    	; 0x11b2 <turnOffPWM+0x9a>
    114a:	1e c0       	rjmp	.+60     	; 0x1188 <turnOffPWM+0x70>
    114c:	8c 30       	cpi	r24, 0x0C	; 12
    114e:	31 f1       	breq	.+76     	; 0x119c <turnOffPWM+0x84>
    1150:	8e 30       	cpi	r24, 0x0E	; 14
    1152:	79 f5       	brne	.+94     	; 0x11b2 <turnOffPWM+0x9a>
    1154:	29 c0       	rjmp	.+82     	; 0x11a8 <turnOffPWM+0x90>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1156:	80 91 80 00 	lds	r24, 0x0080
    115a:	8f 77       	andi	r24, 0x7F	; 127
    115c:	03 c0       	rjmp	.+6      	; 0x1164 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    115e:	80 91 80 00 	lds	r24, 0x0080
    1162:	8f 7d       	andi	r24, 0xDF	; 223
    1164:	80 93 80 00 	sts	0x0080, r24
    1168:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    116a:	84 b5       	in	r24, 0x24	; 36
    116c:	8f 77       	andi	r24, 0x7F	; 127
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <turnOffPWM+0x5c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1170:	84 b5       	in	r24, 0x24	; 36
    1172:	8f 7d       	andi	r24, 0xDF	; 223
    1174:	84 bd       	out	0x24, r24	; 36
    1176:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1178:	80 91 90 00 	lds	r24, 0x0090
    117c:	8f 77       	andi	r24, 0x7F	; 127
    117e:	07 c0       	rjmp	.+14     	; 0x118e <turnOffPWM+0x76>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1180:	80 91 90 00 	lds	r24, 0x0090
    1184:	8f 7d       	andi	r24, 0xDF	; 223
    1186:	03 c0       	rjmp	.+6      	; 0x118e <turnOffPWM+0x76>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1188:	80 91 90 00 	lds	r24, 0x0090
    118c:	87 7f       	andi	r24, 0xF7	; 247
    118e:	80 93 90 00 	sts	0x0090, r24
    1192:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1194:	80 91 c0 00 	lds	r24, 0x00C0
    1198:	8f 77       	andi	r24, 0x7F	; 127
    119a:	03 c0       	rjmp	.+6      	; 0x11a2 <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    119c:	80 91 c0 00 	lds	r24, 0x00C0
    11a0:	8f 7d       	andi	r24, 0xDF	; 223
    11a2:	80 93 c0 00 	sts	0x00C0, r24
    11a6:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    11a8:	80 91 c2 00 	lds	r24, 0x00C2
    11ac:	87 7f       	andi	r24, 0xF7	; 247
    11ae:	80 93 c2 00 	sts	0x00C2, r24
    11b2:	08 95       	ret

000011b4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	f6 2e       	mov	r15, r22
	uint8_t timer = digitalPinToTimer(pin);
    11bc:	48 2f       	mov	r20, r24
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	ca 01       	movw	r24, r20
    11c2:	82 55       	subi	r24, 0x52	; 82
    11c4:	9e 4f       	sbci	r25, 0xFE	; 254
    11c6:	fc 01       	movw	r30, r24
    11c8:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
    11ca:	ca 01       	movw	r24, r20
    11cc:	80 57       	subi	r24, 0x70	; 112
    11ce:	9e 4f       	sbci	r25, 0xFE	; 254
    11d0:	fc 01       	movw	r30, r24
    11d2:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    11d4:	4e 58       	subi	r20, 0x8E	; 142
    11d6:	5e 4f       	sbci	r21, 0xFE	; 254
    11d8:	fa 01       	movw	r30, r20
    11da:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    11dc:	00 23       	and	r16, r16
    11de:	c9 f0       	breq	.+50     	; 0x1212 <digitalWrite+0x5e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    11e0:	22 23       	and	r18, r18
    11e2:	19 f0       	breq	.+6      	; 0x11ea <digitalWrite+0x36>
    11e4:	82 2f       	mov	r24, r18
    11e6:	0e 94 8c 08 	call	0x1118	; 0x1118 <turnOffPWM>

	out = portOutputRegister(port);
    11ea:	e0 2f       	mov	r30, r16
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	ee 0f       	add	r30, r30
    11f0:	ff 1f       	adc	r31, r31
    11f2:	ea 5a       	subi	r30, 0xAA	; 170
    11f4:	fe 4f       	sbci	r31, 0xFE	; 254
    11f6:	a5 91       	lpm	r26, Z+
    11f8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    11fa:	9f b7       	in	r25, 0x3f	; 63
	cli();
    11fc:	f8 94       	cli

	if (val == LOW) {
    11fe:	ff 20       	and	r15, r15
    1200:	21 f4       	brne	.+8      	; 0x120a <digitalWrite+0x56>
		*out &= ~bit;
    1202:	8c 91       	ld	r24, X
    1204:	10 95       	com	r17
    1206:	81 23       	and	r24, r17
    1208:	02 c0       	rjmp	.+4      	; 0x120e <digitalWrite+0x5a>
	} else {
		*out |= bit;
    120a:	8c 91       	ld	r24, X
    120c:	81 2b       	or	r24, r17
    120e:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1210:	9f bf       	out	0x3f, r25	; 63
}
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	ff 90       	pop	r15
    1218:	08 95       	ret

0000121a <_ZN7Serial_5beginEm>:
	bool result = false;
	if (_usbLineInfo.lineState > 0) 
		result = true;
	delay(10);
	return result;
}
    121a:	2f ef       	ldi	r18, 0xFF	; 255
    121c:	3f ef       	ldi	r19, 0xFF	; 255
    121e:	fc 01       	movw	r30, r24
    1220:	35 87       	std	Z+13, r19	; 0x0d
    1222:	24 87       	std	Z+12, r18	; 0x0c
    1224:	08 95       	ret

00001226 <_ZN7Serial_5writeEh>:
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	0f 92       	push	r0
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	fc 01       	movw	r30, r24
    1232:	69 83       	std	Y+1, r22	; 0x01
    1234:	a0 81       	ld	r26, Z
    1236:	b1 81       	ldd	r27, Z+1	; 0x01
    1238:	12 96       	adiw	r26, 0x02	; 2
    123a:	2d 91       	ld	r18, X+
    123c:	3c 91       	ld	r19, X
    123e:	13 97       	sbiw	r26, 0x03	; 3
    1240:	be 01       	movw	r22, r28
    1242:	6f 5f       	subi	r22, 0xFF	; 255
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
    1246:	41 e0       	ldi	r20, 0x01	; 1
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	f9 01       	movw	r30, r18
    124c:	09 95       	icall
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <_GLOBAL__I__cdcInterface>:
    1256:	10 92 9a 02 	sts	0x029A, r1
    125a:	10 92 99 02 	sts	0x0299, r1
    125e:	88 ee       	ldi	r24, 0xE8	; 232
    1260:	93 e0       	ldi	r25, 0x03	; 3
    1262:	a0 e0       	ldi	r26, 0x00	; 0
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	80 93 9b 02 	sts	0x029B, r24
    126a:	90 93 9c 02 	sts	0x029C, r25
    126e:	a0 93 9d 02 	sts	0x029D, r26
    1272:	b0 93 9e 02 	sts	0x029E, r27
    1276:	84 e5       	ldi	r24, 0x54	; 84
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	90 93 98 02 	sts	0x0298, r25
    127e:	80 93 97 02 	sts	0x0297, r24
    1282:	8f ef       	ldi	r24, 0xFF	; 255
    1284:	9f ef       	ldi	r25, 0xFF	; 255
    1286:	90 93 a4 02 	sts	0x02A4, r25
    128a:	80 93 a3 02 	sts	0x02A3, r24
    128e:	08 95       	ret

00001290 <_ZN7Serial_5writeEPKhj>:
size_t Serial_::write(uint8_t c)
{
	return write(&c, 1);
}

size_t Serial_::write(const uint8_t *buffer, size_t size)
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	ec 01       	movw	r28, r24
	 the connection is closed are lost - just like with a UART. */
	
	// TODO - ZE - check behavior on different OSes and test what happens if an
	// open connection isn't broken cleanly (cable is yanked out, host dies
	// or locks up, or host virtual serial port hangs)
	if (_usbLineInfo.lineState > 0)	{
    1296:	80 91 1b 01 	lds	r24, 0x011B
    129a:	88 23       	and	r24, r24
    129c:	41 f0       	breq	.+16     	; 0x12ae <_ZN7Serial_5writeEPKhj+0x1e>
		int r = USB_Send(CDC_TX,buffer,size);
    129e:	83 e0       	ldi	r24, 0x03	; 3
    12a0:	0e 94 84 0b 	call	0x1708	; 0x1708 <_Z8USB_SendhPKvi>
		if (r > 0) {
    12a4:	18 16       	cp	r1, r24
    12a6:	19 06       	cpc	r1, r25
    12a8:	14 f4       	brge	.+4      	; 0x12ae <_ZN7Serial_5writeEPKhj+0x1e>
			return r;
    12aa:	9c 01       	movw	r18, r24
    12ac:	06 c0       	rjmp	.+12     	; 0x12ba <_ZN7Serial_5writeEPKhj+0x2a>
		} else {
			setWriteError();
			return 0;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	9b 83       	std	Y+3, r25	; 0x03
    12b4:	8a 83       	std	Y+2, r24	; 0x02
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	setWriteError();
	return 0;
}
    12ba:	c9 01       	movw	r24, r18
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <_ZN7Serial_5flushEv>:
	return USB_Recv(CDC_RX);
}

void Serial_::flush(void)
{
	USB_Flush(CDC_TX);
    12c2:	83 e0       	ldi	r24, 0x03	; 3
    12c4:	0e 94 0d 0b 	call	0x161a	; 0x161a <_Z9USB_Flushh>
}
    12c8:	08 95       	ret

000012ca <_ZN7Serial_4readEv>:
	if (peek_buffer < 0)
		peek_buffer = USB_Recv(CDC_RX);
	return peek_buffer;
}

int Serial_::read(void)
    12ca:	fc 01       	movw	r30, r24
{
	if (peek_buffer >= 0) {
    12cc:	24 85       	ldd	r18, Z+12	; 0x0c
    12ce:	35 85       	ldd	r19, Z+13	; 0x0d
    12d0:	37 fd       	sbrc	r19, 7
    12d2:	05 c0       	rjmp	.+10     	; 0x12de <_ZN7Serial_4readEv+0x14>
		int c = peek_buffer;
		peek_buffer = -1;
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	9f ef       	ldi	r25, 0xFF	; 255
    12d8:	95 87       	std	Z+13, r25	; 0x0d
    12da:	84 87       	std	Z+12, r24	; 0x0c
    12dc:	04 c0       	rjmp	.+8      	; 0x12e6 <_ZN7Serial_4readEv+0x1c>
		return c;
	}
	return USB_Recv(CDC_RX);
    12de:	82 e0       	ldi	r24, 0x02	; 2
    12e0:	0e 94 98 0a 	call	0x1530	; 0x1530 <_Z8USB_Recvh>
    12e4:	9c 01       	movw	r18, r24
}
    12e6:	c9 01       	movw	r24, r18
    12e8:	08 95       	ret

000012ea <_ZN7Serial_4peekEv>:
		return 1 + USB_Available(CDC_RX);
	}
	return USB_Available(CDC_RX);
}

int Serial_::peek(void)
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	ec 01       	movw	r28, r24
{
	if (peek_buffer < 0)
    12f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    12f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    12f4:	97 ff       	sbrs	r25, 7
    12f6:	05 c0       	rjmp	.+10     	; 0x1302 <_ZN7Serial_4peekEv+0x18>
		peek_buffer = USB_Recv(CDC_RX);
    12f8:	82 e0       	ldi	r24, 0x02	; 2
    12fa:	0e 94 98 0a 	call	0x1530	; 0x1530 <_Z8USB_Recvh>
    12fe:	9d 87       	std	Y+13, r25	; 0x0d
    1300:	8c 87       	std	Y+12, r24	; 0x0c
	return peek_buffer;
}
    1302:	8c 85       	ldd	r24, Y+12	; 0x0c
    1304:	9d 85       	ldd	r25, Y+13	; 0x0d
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	08 95       	ret

0000130c <_ZN7Serial_9availableEv>:
{
}

int Serial_::available(void)
{
	if (peek_buffer >= 0) {
    130c:	fc 01       	movw	r30, r24
    130e:	84 85       	ldd	r24, Z+12	; 0x0c
    1310:	95 85       	ldd	r25, Z+13	; 0x0d
    1312:	97 fd       	sbrc	r25, 7
    1314:	08 c0       	rjmp	.+16     	; 0x1326 <_ZN7Serial_9availableEv+0x1a>
		return 1 + USB_Available(CDC_RX);
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <_Z13USB_Availableh>
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	2f 5f       	subi	r18, 0xFF	; 255
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	05 c0       	rjmp	.+10     	; 0x1330 <_ZN7Serial_9availableEv+0x24>
	}
	return USB_Available(CDC_RX);
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <_Z13USB_Availableh>
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
}
    1330:	c9 01       	movw	r24, r18
    1332:	08 95       	ret

00001334 <_Z16CDC_GetInterfacePh>:
	D_INTERFACE(CDC_DATA_INTERFACE,2,CDC_DATA_INTERFACE_CLASS,0,0),
	D_ENDPOINT(USB_ENDPOINT_OUT(CDC_ENDPOINT_OUT),USB_ENDPOINT_TYPE_BULK,0x40,0),
	D_ENDPOINT(USB_ENDPOINT_IN (CDC_ENDPOINT_IN ),USB_ENDPOINT_TYPE_BULK,0x40,0)
};

int WEAK CDC_GetInterface(u8* interfaceNum)
    1334:	fc 01       	movw	r30, r24
{
	interfaceNum[0] += 2;	// uses 2
    1336:	80 81       	ld	r24, Z
    1338:	8e 5f       	subi	r24, 0xFE	; 254
    133a:	80 83       	st	Z, r24
	return USB_SendControl(TRANSFER_PGM,&_cdcInterface,sizeof(_cdcInterface));
    133c:	80 e8       	ldi	r24, 0x80	; 128
    133e:	68 ed       	ldi	r22, 0xD8	; 216
    1340:	71 e0       	ldi	r23, 0x01	; 1
    1342:	42 e4       	ldi	r20, 0x42	; 66
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z15USB_SendControlhPKvi>
}
    134a:	08 95       	ret

0000134c <_Z9CDC_SetupR5Setup>:

bool WEAK CDC_Setup(Setup& setup)
    134c:	fc 01       	movw	r30, r24
{
	u8 r = setup.bRequest;
    134e:	81 81       	ldd	r24, Z+1	; 0x01
	u8 requestType = setup.bmRequestType;
    1350:	90 81       	ld	r25, Z

	if (REQUEST_DEVICETOHOST_CLASS_INTERFACE == requestType)
    1352:	91 3a       	cpi	r25, 0xA1	; 161
    1354:	59 f4       	brne	.+22     	; 0x136c <_Z9CDC_SetupR5Setup+0x20>
	{
		if (CDC_GET_LINE_CODING == r)
    1356:	81 32       	cpi	r24, 0x21	; 33
    1358:	09 f0       	breq	.+2      	; 0x135c <_Z9CDC_SetupR5Setup+0x10>
    135a:	4c c0       	rjmp	.+152    	; 0x13f4 <_Z9CDC_SetupR5Setup+0xa8>
		{
			USB_SendControl(0,(void*)&_usbLineInfo,7);
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	64 e1       	ldi	r22, 0x14	; 20
    1360:	71 e0       	ldi	r23, 0x01	; 1
    1362:	47 e0       	ldi	r20, 0x07	; 7
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z15USB_SendControlhPKvi>
    136a:	42 c0       	rjmp	.+132    	; 0x13f0 <_Z9CDC_SetupR5Setup+0xa4>
			return true;
		}
	}

	if (REQUEST_HOSTTODEVICE_CLASS_INTERFACE == requestType)
    136c:	91 32       	cpi	r25, 0x21	; 33
    136e:	09 f0       	breq	.+2      	; 0x1372 <_Z9CDC_SetupR5Setup+0x26>
    1370:	41 c0       	rjmp	.+130    	; 0x13f4 <_Z9CDC_SetupR5Setup+0xa8>
	{
		if (CDC_SET_LINE_CODING == r)
    1372:	80 32       	cpi	r24, 0x20	; 32
    1374:	39 f4       	brne	.+14     	; 0x1384 <_Z9CDC_SetupR5Setup+0x38>
		{
			USB_RecvControl((void*)&_usbLineInfo,7);
    1376:	84 e1       	ldi	r24, 0x14	; 20
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	67 e0       	ldi	r22, 0x07	; 7
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <_Z15USB_RecvControlPvi>
    1382:	36 c0       	rjmp	.+108    	; 0x13f0 <_Z9CDC_SetupR5Setup+0xa4>
			return true;
		}

		if (CDC_SET_CONTROL_LINE_STATE == r)
    1384:	82 32       	cpi	r24, 0x22	; 34
    1386:	09 f0       	breq	.+2      	; 0x138a <_Z9CDC_SetupR5Setup+0x3e>
    1388:	35 c0       	rjmp	.+106    	; 0x13f4 <_Z9CDC_SetupR5Setup+0xa8>
		{
			_usbLineInfo.lineState = setup.wValueL;
    138a:	82 81       	ldd	r24, Z+2	; 0x02
    138c:	80 93 1b 01 	sts	0x011B, r24

			// auto-reset into the bootloader is triggered when the port, already 
			// open at 1200 bps, is closed.  this is the signal to start the watchdog
			// with a relatively long period so it can finish housekeeping tasks
			// like servicing endpoints before the sketch ends
			if (1200 == _usbLineInfo.dwDTERate) {
    1390:	80 91 14 01 	lds	r24, 0x0114
    1394:	90 91 15 01 	lds	r25, 0x0115
    1398:	a0 91 16 01 	lds	r26, 0x0116
    139c:	b0 91 17 01 	lds	r27, 0x0117
    13a0:	80 5b       	subi	r24, 0xB0	; 176
    13a2:	94 40       	sbci	r25, 0x04	; 4
    13a4:	a0 40       	sbci	r26, 0x00	; 0
    13a6:	b0 40       	sbci	r27, 0x00	; 0
    13a8:	19 f5       	brne	.+70     	; 0x13f0 <_Z9CDC_SetupR5Setup+0xa4>
				// We check DTR state to determine if host port is open (bit 0 of lineState).
				if ((_usbLineInfo.lineState & 0x01) == 0) {
    13aa:	80 91 1b 01 	lds	r24, 0x011B
    13ae:	80 fd       	sbrc	r24, 0
    13b0:	12 c0       	rjmp	.+36     	; 0x13d6 <_Z9CDC_SetupR5Setup+0x8a>
					*(uint16_t *)0x0800 = 0x7777;
    13b2:	87 e7       	ldi	r24, 0x77	; 119
    13b4:	97 e7       	ldi	r25, 0x77	; 119
    13b6:	90 93 01 08 	sts	0x0801, r25
    13ba:	80 93 00 08 	sts	0x0800, r24
					wdt_enable(WDTO_120MS);
    13be:	2b e0       	ldi	r18, 0x0B	; 11
    13c0:	88 e1       	ldi	r24, 0x18	; 24
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	a8 95       	wdr
    13ca:	80 93 60 00 	sts	0x0060, r24
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	20 93 60 00 	sts	0x0060, r18
    13d4:	0d c0       	rjmp	.+26     	; 0x13f0 <_Z9CDC_SetupR5Setup+0xa4>
					// Most OSs do some intermediate steps when configuring ports and DTR can
					// twiggle more than once before stabilizing.
					// To avoid spurious resets we set the watchdog to 250ms and eventually
					// cancel if DTR goes back high.
	
					wdt_disable();
    13d6:	88 e1       	ldi	r24, 0x18	; 24
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	80 93 60 00 	sts	0x0060, r24
    13e0:	10 92 60 00 	sts	0x0060, r1
    13e4:	0f be       	out	0x3f, r0	; 63
					wdt_reset();
    13e6:	a8 95       	wdr
					*(uint16_t *)0x0800 = 0x0;
    13e8:	10 92 01 08 	sts	0x0801, r1
    13ec:	10 92 00 08 	sts	0x0800, r1
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	08 95       	ret
    13f4:	80 e0       	ldi	r24, 0x00	; 0
			}
			return true;
		}
	}
	return false;
}
    13f6:	08 95       	ret

000013f8 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    13f8:	08 95       	ret

000013fa <main>:

int main(void)
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
{
	init();
    13fe:	0e 94 f7 07 	call	0xfee	; 0xfee <init>

	initVariant();
    1402:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    1406:	8d ea       	ldi	r24, 0xAD	; 173
    1408:	92 e0       	ldi	r25, 0x02	; 2
    140a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    140e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1412:	c0 e0       	ldi	r28, 0x00	; 0
    1414:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    1416:	0e 94 31 02 	call	0x462	; 0x462 <loop>
		if (serialEventRun) serialEventRun();
    141a:	20 97       	sbiw	r28, 0x00	; 0
    141c:	e1 f3       	breq	.-8      	; 0x1416 <main+0x1c>
    141e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1422:	f9 cf       	rjmp	.-14     	; 0x1416 <main+0x1c>

00001424 <_ZN5Print5writeEPKhj>:
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1424:	cf 92       	push	r12
    1426:	df 92       	push	r13
    1428:	ef 92       	push	r14
    142a:	ff 92       	push	r15
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	7c 01       	movw	r14, r24
    1436:	6b 01       	movw	r12, r22
    1438:	8a 01       	movw	r16, r20
    143a:	c0 e0       	ldi	r28, 0x00	; 0
    143c:	d0 e0       	ldi	r29, 0x00	; 0
    143e:	0f c0       	rjmp	.+30     	; 0x145e <_ZN5Print5writeEPKhj+0x3a>
    1440:	d6 01       	movw	r26, r12
    1442:	6d 91       	ld	r22, X+
    1444:	6d 01       	movw	r12, r26
    1446:	d7 01       	movw	r26, r14
    1448:	ed 91       	ld	r30, X+
    144a:	fc 91       	ld	r31, X
    144c:	01 90       	ld	r0, Z+
    144e:	f0 81       	ld	r31, Z
    1450:	e0 2d       	mov	r30, r0
    1452:	c7 01       	movw	r24, r14
    1454:	09 95       	icall
    1456:	c8 0f       	add	r28, r24
    1458:	d9 1f       	adc	r29, r25
    145a:	01 50       	subi	r16, 0x01	; 1
    145c:	10 40       	sbci	r17, 0x00	; 0
    145e:	01 15       	cp	r16, r1
    1460:	11 05       	cpc	r17, r1
    1462:	71 f7       	brne	.-36     	; 0x1440 <_ZN5Print5writeEPKhj+0x1c>
    1464:	ce 01       	movw	r24, r28
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	08 95       	ret

00001478 <_ZN5Print5writeEPKc>:
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	ec 01       	movw	r28, r24
    147e:	61 15       	cp	r22, r1
    1480:	71 05       	cpc	r23, r1
    1482:	19 f4       	brne	.+6      	; 0x148a <_ZN5Print5writeEPKc+0x12>
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	0f c0       	rjmp	.+30     	; 0x14a8 <_ZN5Print5writeEPKc+0x30>
    148a:	db 01       	movw	r26, r22
    148c:	0d 90       	ld	r0, X+
    148e:	00 20       	and	r0, r0
    1490:	e9 f7       	brne	.-6      	; 0x148c <_ZN5Print5writeEPKc+0x14>
    1492:	11 97       	sbiw	r26, 0x01	; 1
    1494:	a6 1b       	sub	r26, r22
    1496:	b7 0b       	sbc	r27, r23
    1498:	e8 81       	ld	r30, Y
    149a:	f9 81       	ldd	r31, Y+1	; 0x01
    149c:	02 80       	ldd	r0, Z+2	; 0x02
    149e:	f3 81       	ldd	r31, Z+3	; 0x03
    14a0:	e0 2d       	mov	r30, r0
    14a2:	ad 01       	movw	r20, r26
    14a4:	09 95       	icall
    14a6:	9c 01       	movw	r18, r24
    14a8:	c9 01       	movw	r24, r18
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	08 95       	ret

000014b0 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    14b0:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN5Print5writeEPKc>
}
    14b4:	08 95       	ret

000014b6 <_Z13USB_Availableh>:
u8 USBConnected()
{
	u8 f = UDFNUML;
	delay(3);
	return f != UDFNUML;
}
    14b6:	9f b7       	in	r25, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	87 70       	andi	r24, 0x07	; 7
    14bc:	80 93 e9 00 	sts	0x00E9, r24
    14c0:	80 91 f2 00 	lds	r24, 0x00F2
    14c4:	9f bf       	out	0x3f, r25	; 63
    14c6:	08 95       	ret

000014c8 <_Z8USB_RecvhPvi>:
    14c8:	28 2f       	mov	r18, r24
    14ca:	80 91 a7 02 	lds	r24, 0x02A7
    14ce:	88 23       	and	r24, r24
    14d0:	c1 f0       	breq	.+48     	; 0x1502 <_Z8USB_RecvhPvi+0x3a>
    14d2:	57 ff       	sbrs	r21, 7
    14d4:	1a c0       	rjmp	.+52     	; 0x150a <_Z8USB_RecvhPvi+0x42>
    14d6:	15 c0       	rjmp	.+42     	; 0x1502 <_Z8USB_RecvhPvi+0x3a>
    14d8:	28 9a       	sbi	0x05, 0	; 5
    14da:	90 93 a6 02 	sts	0x02A6, r25
    14de:	80 91 f1 00 	lds	r24, 0x00F1
    14e2:	81 93       	st	Z+, r24
    14e4:	e2 17       	cp	r30, r18
    14e6:	f3 07       	cpc	r31, r19
    14e8:	b9 f7       	brne	.-18     	; 0x14d8 <_Z8USB_RecvhPvi+0x10>
    14ea:	41 15       	cp	r20, r1
    14ec:	51 05       	cpc	r21, r1
    14ee:	39 f0       	breq	.+14     	; 0x14fe <_Z8USB_RecvhPvi+0x36>
    14f0:	80 91 f2 00 	lds	r24, 0x00F2
    14f4:	88 23       	and	r24, r24
    14f6:	19 f4       	brne	.+6      	; 0x14fe <_Z8USB_RecvhPvi+0x36>
    14f8:	8b e6       	ldi	r24, 0x6B	; 107
    14fa:	80 93 e8 00 	sts	0x00E8, r24
    14fe:	af bf       	out	0x3f, r26	; 63
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <_Z8USB_RecvhPvi+0x3e>
    1502:	4f ef       	ldi	r20, 0xFF	; 255
    1504:	5f ef       	ldi	r21, 0xFF	; 255
    1506:	ca 01       	movw	r24, r20
    1508:	08 95       	ret
    150a:	af b7       	in	r26, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	27 70       	andi	r18, 0x07	; 7
    1510:	20 93 e9 00 	sts	0x00E9, r18
    1514:	80 91 f2 00 	lds	r24, 0x00F2
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	24 17       	cp	r18, r20
    151e:	35 07       	cpc	r19, r21
    1520:	0c f4       	brge	.+2      	; 0x1524 <_Z8USB_RecvhPvi+0x5c>
    1522:	a9 01       	movw	r20, r18
    1524:	fb 01       	movw	r30, r22
    1526:	9b 01       	movw	r18, r22
    1528:	24 0f       	add	r18, r20
    152a:	31 1d       	adc	r19, r1
    152c:	94 e6       	ldi	r25, 0x64	; 100
    152e:	da cf       	rjmp	.-76     	; 0x14e4 <_Z8USB_RecvhPvi+0x1c>

00001530 <_Z8USB_Recvh>:
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	0f 92       	push	r0
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	be 01       	movw	r22, r28
    153c:	6f 5f       	subi	r22, 0xFF	; 255
    153e:	7f 4f       	sbci	r23, 0xFF	; 255
    1540:	41 e0       	ldi	r20, 0x01	; 1
    1542:	50 e0       	ldi	r21, 0x00	; 0
    1544:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_Z8USB_RecvhPvi>
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	19 f0       	breq	.+6      	; 0x1552 <_Z8USB_Recvh+0x22>
    154c:	2f ef       	ldi	r18, 0xFF	; 255
    154e:	3f ef       	ldi	r19, 0xFF	; 255
    1550:	03 c0       	rjmp	.+6      	; 0x1558 <_Z8USB_Recvh+0x28>
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	c9 01       	movw	r24, r18
    155a:	0f 90       	pop	r0
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <_Z15USB_SendControlhPKvi>:
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	f8 2e       	mov	r15, r24
    156a:	14 2f       	mov	r17, r20
    156c:	05 2f       	mov	r16, r21
    156e:	40 91 aa 02 	lds	r20, 0x02AA
    1572:	50 91 ab 02 	lds	r21, 0x02AB
    1576:	21 2f       	mov	r18, r17
    1578:	30 2f       	mov	r19, r16
    157a:	c9 01       	movw	r24, r18
    157c:	dc 01       	movw	r26, r24
    157e:	fb 01       	movw	r30, r22
    1580:	6e ef       	ldi	r22, 0xFE	; 254
    1582:	29 c0       	rjmp	.+82     	; 0x15d6 <_Z15USB_SendControlhPKvi+0x74>
    1584:	f7 fe       	sbrs	r15, 7
    1586:	02 c0       	rjmp	.+4      	; 0x158c <_Z15USB_SendControlhPKvi+0x2a>
    1588:	94 91       	lpm	r25, Z
    158a:	01 c0       	rjmp	.+2      	; 0x158e <_Z15USB_SendControlhPKvi+0x2c>
    158c:	90 81       	ld	r25, Z
    158e:	20 91 a8 02 	lds	r18, 0x02A8
    1592:	30 91 a9 02 	lds	r19, 0x02A9
    1596:	24 17       	cp	r18, r20
    1598:	35 07       	cpc	r19, r21
    159a:	ac f4       	brge	.+42     	; 0x15c6 <_Z15USB_SendControlhPKvi+0x64>
    159c:	80 91 e8 00 	lds	r24, 0x00E8
    15a0:	85 70       	andi	r24, 0x05	; 5
    15a2:	e1 f3       	breq	.-8      	; 0x159c <_Z15USB_SendControlhPKvi+0x3a>
    15a4:	80 91 e8 00 	lds	r24, 0x00E8
    15a8:	82 ff       	sbrs	r24, 2
    15aa:	03 c0       	rjmp	.+6      	; 0x15b2 <_Z15USB_SendControlhPKvi+0x50>
    15ac:	2f ef       	ldi	r18, 0xFF	; 255
    15ae:	3f ef       	ldi	r19, 0xFF	; 255
    15b0:	17 c0       	rjmp	.+46     	; 0x15e0 <_Z15USB_SendControlhPKvi+0x7e>
    15b2:	90 93 f1 00 	sts	0x00F1, r25
    15b6:	c9 01       	movw	r24, r18
    15b8:	01 96       	adiw	r24, 0x01	; 1
    15ba:	8f 73       	andi	r24, 0x3F	; 63
    15bc:	90 70       	andi	r25, 0x00	; 0
    15be:	89 2b       	or	r24, r25
    15c0:	11 f4       	brne	.+4      	; 0x15c6 <_Z15USB_SendControlhPKvi+0x64>
    15c2:	60 93 e8 00 	sts	0x00E8, r22
    15c6:	2f 5f       	subi	r18, 0xFF	; 255
    15c8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ca:	30 93 a9 02 	sts	0x02A9, r19
    15ce:	20 93 a8 02 	sts	0x02A8, r18
    15d2:	11 97       	sbiw	r26, 0x01	; 1
    15d4:	31 96       	adiw	r30, 0x01	; 1
    15d6:	10 97       	sbiw	r26, 0x00	; 0
    15d8:	a9 f6       	brne	.-86     	; 0x1584 <_Z15USB_SendControlhPKvi+0x22>
    15da:	81 2f       	mov	r24, r17
    15dc:	90 2f       	mov	r25, r16
    15de:	9c 01       	movw	r18, r24
    15e0:	c9 01       	movw	r24, r18
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	ff 90       	pop	r15
    15e8:	08 95       	ret

000015ea <_Z15USB_RecvControlPvi>:
    15ea:	9c 01       	movw	r18, r24
    15ec:	80 91 e8 00 	lds	r24, 0x00E8
    15f0:	82 ff       	sbrs	r24, 2
    15f2:	fc cf       	rjmp	.-8      	; 0x15ec <_Z15USB_RecvControlPvi+0x2>
    15f4:	f9 01       	movw	r30, r18
    15f6:	26 0f       	add	r18, r22
    15f8:	31 1d       	adc	r19, r1
    15fa:	03 c0       	rjmp	.+6      	; 0x1602 <_Z15USB_RecvControlPvi+0x18>
    15fc:	80 91 f1 00 	lds	r24, 0x00F1
    1600:	81 93       	st	Z+, r24
    1602:	e2 17       	cp	r30, r18
    1604:	f3 07       	cpc	r31, r19
    1606:	d1 f7       	brne	.-12     	; 0x15fc <_Z15USB_RecvControlPvi+0x12>
    1608:	28 9a       	sbi	0x05, 0	; 5
    160a:	84 e6       	ldi	r24, 0x64	; 100
    160c:	80 93 a6 02 	sts	0x02A6, r24
    1610:	8b ef       	ldi	r24, 0xFB	; 251
    1612:	80 93 e8 00 	sts	0x00E8, r24
    1616:	cb 01       	movw	r24, r22
    1618:	08 95       	ret

0000161a <_Z9USB_Flushh>:
    161a:	80 93 e9 00 	sts	0x00E9, r24
    161e:	80 91 f2 00 	lds	r24, 0x00F2
    1622:	88 23       	and	r24, r24
    1624:	19 f0       	breq	.+6      	; 0x162c <_Z9USB_Flushh+0x12>
    1626:	8a e3       	ldi	r24, 0x3A	; 58
    1628:	80 93 e8 00 	sts	0x00E8, r24
    162c:	08 95       	ret

0000162e <__vector_10>:
    162e:	1f 92       	push	r1
    1630:	0f 92       	push	r0
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	0f 92       	push	r0
    1636:	11 24       	eor	r1, r1
    1638:	8f 93       	push	r24
    163a:	9f 93       	push	r25
    163c:	80 91 e1 00 	lds	r24, 0x00E1
    1640:	10 92 e1 00 	sts	0x00E1, r1
    1644:	98 2f       	mov	r25, r24
    1646:	83 ff       	sbrs	r24, 3
    1648:	0f c0       	rjmp	.+30     	; 0x1668 <__vector_10+0x3a>
    164a:	10 92 e9 00 	sts	0x00E9, r1
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	80 93 eb 00 	sts	0x00EB, r24
    1654:	10 92 ec 00 	sts	0x00EC, r1
    1658:	82 e3       	ldi	r24, 0x32	; 50
    165a:	80 93 ed 00 	sts	0x00ED, r24
    165e:	10 92 a7 02 	sts	0x02A7, r1
    1662:	88 e0       	ldi	r24, 0x08	; 8
    1664:	80 93 f0 00 	sts	0x00F0, r24
    1668:	92 ff       	sbrs	r25, 2
    166a:	26 c0       	rjmp	.+76     	; 0x16b8 <__vector_10+0x8a>
    166c:	83 e0       	ldi	r24, 0x03	; 3
    166e:	80 93 e9 00 	sts	0x00E9, r24
    1672:	80 91 f2 00 	lds	r24, 0x00F2
    1676:	88 23       	and	r24, r24
    1678:	19 f0       	breq	.+6      	; 0x1680 <__vector_10+0x52>
    167a:	8a e3       	ldi	r24, 0x3A	; 58
    167c:	80 93 e8 00 	sts	0x00E8, r24
    1680:	80 91 a5 02 	lds	r24, 0x02A5
    1684:	88 23       	and	r24, r24
    1686:	51 f0       	breq	.+20     	; 0x169c <__vector_10+0x6e>
    1688:	80 91 a5 02 	lds	r24, 0x02A5
    168c:	81 50       	subi	r24, 0x01	; 1
    168e:	80 93 a5 02 	sts	0x02A5, r24
    1692:	80 91 a5 02 	lds	r24, 0x02A5
    1696:	88 23       	and	r24, r24
    1698:	09 f4       	brne	.+2      	; 0x169c <__vector_10+0x6e>
    169a:	5d 98       	cbi	0x0b, 5	; 11
    169c:	80 91 a6 02 	lds	r24, 0x02A6
    16a0:	88 23       	and	r24, r24
    16a2:	51 f0       	breq	.+20     	; 0x16b8 <__vector_10+0x8a>
    16a4:	80 91 a6 02 	lds	r24, 0x02A6
    16a8:	81 50       	subi	r24, 0x01	; 1
    16aa:	80 93 a6 02 	sts	0x02A6, r24
    16ae:	80 91 a6 02 	lds	r24, 0x02A6
    16b2:	88 23       	and	r24, r24
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <__vector_10+0x8a>
    16b6:	28 98       	cbi	0x05, 0	; 5
    16b8:	9f 91       	pop	r25
    16ba:	8f 91       	pop	r24
    16bc:	0f 90       	pop	r0
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	0f 90       	pop	r0
    16c2:	1f 90       	pop	r1
    16c4:	18 95       	reti

000016c6 <_GLOBAL__I_TxLEDPulse>:
    16c6:	08 95       	ret

000016c8 <_ZN10USBDevice_6attachEv>:
    16c8:	10 92 a7 02 	sts	0x02A7, r1
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	80 93 d7 00 	sts	0x00D7, r24
    16d2:	80 ea       	ldi	r24, 0xA0	; 160
    16d4:	80 93 d8 00 	sts	0x00D8, r24
    16d8:	82 e1       	ldi	r24, 0x12	; 18
    16da:	89 bd       	out	0x29, r24	; 41
    16dc:	09 b4       	in	r0, 0x29	; 41
    16de:	00 fe       	sbrs	r0, 0
    16e0:	fd cf       	rjmp	.-6      	; 0x16dc <_ZN10USBDevice_6attachEv+0x14>
    16e2:	61 e0       	ldi	r22, 0x01	; 1
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 9e 07 	call	0xf3c	; 0xf3c <delay>
    16ee:	80 e9       	ldi	r24, 0x90	; 144
    16f0:	80 93 d8 00 	sts	0x00D8, r24
    16f4:	8c e0       	ldi	r24, 0x0C	; 12
    16f6:	80 93 e2 00 	sts	0x00E2, r24
    16fa:	10 92 e0 00 	sts	0x00E0, r1
    16fe:	55 9a       	sbi	0x0a, 5	; 10
    1700:	20 9a       	sbi	0x04, 0	; 4
    1702:	5d 98       	cbi	0x0b, 5	; 11
    1704:	28 98       	cbi	0x05, 0	; 5
    1706:	08 95       	ret

00001708 <_Z8USB_SendhPKvi>:
		return 0;
	return 64 - FifoByteCount();
}

//	Blocking Send of data to an endpoint
int USB_Send(u8 ep, const void* d, int len)
    1708:	5f 92       	push	r5
    170a:	6f 92       	push	r6
    170c:	7f 92       	push	r7
    170e:	8f 92       	push	r8
    1710:	9f 92       	push	r9
    1712:	af 92       	push	r10
    1714:	bf 92       	push	r11
    1716:	cf 92       	push	r12
    1718:	df 92       	push	r13
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	e8 2e       	mov	r14, r24
    1728:	84 2e       	mov	r8, r20
    172a:	75 2e       	mov	r7, r21
{
	if (!_usbConfiguration)
    172c:	80 91 a7 02 	lds	r24, 0x02A7
    1730:	88 23       	and	r24, r24
    1732:	71 f1       	breq	.+92     	; 0x1790 <_Z8USB_SendhPKvi+0x88>
		return -1;

	int r = len;
	const u8* data = (const u8*)d;
    1734:	8b 01       	movw	r16, r22
    1736:	24 2f       	mov	r18, r20
    1738:	35 2f       	mov	r19, r21
    173a:	c9 01       	movw	r24, r18
    173c:	ec 01       	movw	r28, r24
    173e:	7a ef       	ldi	r23, 0xFA	; 250
    1740:	f7 2e       	mov	r15, r23
	u8 _sreg;
public:
	LockEP(u8 ep) : _sreg(SREG)
	{
		cli();
		SetEP(ep & 7);
    1742:	67 e0       	ldi	r22, 0x07	; 7
    1744:	96 2e       	mov	r9, r22
    1746:	9e 20       	and	r9, r14
u8 USB_SendSpace(u8 ep)
{
	LockEP lock(ep);
	if (!ReadWriteAllowed())
		return 0;
	return 64 - FifoByteCount();
    1748:	50 e4       	ldi	r21, 0x40	; 64
    174a:	55 2e       	mov	r5, r21
			LockEP lock(ep);
			// Frame may have been released by the SOF interrupt handler
			if (!ReadWriteAllowed())
				continue;
			len -= n;
			if (ep & TRANSFER_ZERO)
    174c:	8e 2d       	mov	r24, r14
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	40 e2       	ldi	r20, 0x20	; 32
    1752:	a4 2e       	mov	r10, r20
    1754:	b1 2c       	mov	r11, r1
    1756:	a8 22       	and	r10, r24
    1758:	b9 22       	and	r11, r25
	UEINTX = 0x6B;	// FIFOCON=0 NAKINI=1 RWAL=1 NAKOUTI=0 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=1
}

static inline void ReleaseTX()
{
	UEINTX = 0x3A;	// FIFOCON=0 NAKINI=0 RWAL=1 NAKOUTI=1 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=0
    175a:	3a e3       	ldi	r19, 0x3A	; 58
    175c:	63 2e       	mov	r6, r19
			else
			{
				while (n--)
					Send8(*data++);
			}
			if (!ReadWriteAllowed() || ((len == 0) && (ep & TRANSFER_RELEASE)))	// Release full buffer
    175e:	20 e4       	ldi	r18, 0x40	; 64
    1760:	c2 2e       	mov	r12, r18
    1762:	d1 2c       	mov	r13, r1
    1764:	c8 22       	and	r12, r24
    1766:	d9 22       	and	r13, r25
    1768:	5c c0       	rjmp	.+184    	; 0x1822 <_Z8USB_SendhPKvi+0x11a>
#define USB_RECV_TIMEOUT
class LockEP
{
	u8 _sreg;
public:
	LockEP(u8 ep) : _sreg(SREG)
    176a:	9f b7       	in	r25, 0x3f	; 63
	{
		cli();
    176c:	f8 94       	cli
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    176e:	90 92 e9 00 	sts	0x00E9, r9
	UECONX = (1<<STALLRQ) | (1<<EPEN);
}

static inline u8 ReadWriteAllowed()
{
	return UEINTX & (1<<RWAL);
    1772:	80 91 e8 00 	lds	r24, 0x00E8

//	Space in send EP
u8 USB_SendSpace(u8 ep)
{
	LockEP lock(ep);
	if (!ReadWriteAllowed())
    1776:	85 fd       	sbrc	r24, 5
    1778:	02 c0       	rjmp	.+4      	; 0x177e <_Z8USB_SendhPKvi+0x76>
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <_Z8USB_SendhPKvi+0x7e>
	UENUM = ep;
}

static inline u8 FifoByteCount()
{
	return UEBCLX;
    177e:	80 91 f2 00 	lds	r24, 0x00F2
u8 USB_SendSpace(u8 ep)
{
	LockEP lock(ep);
	if (!ReadWriteAllowed())
		return 0;
	return 64 - FifoByteCount();
    1782:	25 2d       	mov	r18, r5
    1784:	28 1b       	sub	r18, r24
		cli();
		SetEP(ep & 7);
	}
	~LockEP()
	{
		SREG = _sreg;
    1786:	9f bf       	out	0x3f, r25	; 63
	u8 zero = ep & TRANSFER_ZERO;
	u8 timeout = 250;		// 250ms timeout on send? TODO
	while (len)
	{
		u8 n = USB_SendSpace(ep);
		if (n == 0)
    1788:	22 23       	and	r18, r18
    178a:	61 f4       	brne	.+24     	; 0x17a4 <_Z8USB_SendhPKvi+0x9c>
		{
			if (!(--timeout))
    178c:	fa 94       	dec	r15
    178e:	19 f4       	brne	.+6      	; 0x1796 <_Z8USB_SendhPKvi+0x8e>
    1790:	2f ef       	ldi	r18, 0xFF	; 255
    1792:	3f ef       	ldi	r19, 0xFF	; 255
    1794:	51 c0       	rjmp	.+162    	; 0x1838 <_Z8USB_SendhPKvi+0x130>
				return -1;
			delay(1);
    1796:	61 e0       	ldi	r22, 0x01	; 1
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <delay>
    17a2:	3f c0       	rjmp	.+126    	; 0x1822 <_Z8USB_SendhPKvi+0x11a>
			continue;
		}

		if (n > len)
    17a4:	82 2f       	mov	r24, r18
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	c8 17       	cp	r28, r24
    17aa:	d9 07       	cpc	r29, r25
    17ac:	0c f4       	brge	.+2      	; 0x17b0 <_Z8USB_SendhPKvi+0xa8>
			n = len;
    17ae:	2c 2f       	mov	r18, r28
#define USB_RECV_TIMEOUT
class LockEP
{
	u8 _sreg;
public:
	LockEP(u8 ep) : _sreg(SREG)
    17b0:	4f b7       	in	r20, 0x3f	; 63
	{
		cli();
    17b2:	f8 94       	cli
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    17b4:	90 92 e9 00 	sts	0x00E9, r9
	UECONX = (1<<STALLRQ) | (1<<EPEN);
}

static inline u8 ReadWriteAllowed()
{
	return UEINTX & (1<<RWAL);
    17b8:	80 91 e8 00 	lds	r24, 0x00E8
		if (n > len)
			n = len;
		{
			LockEP lock(ep);
			// Frame may have been released by the SOF interrupt handler
			if (!ReadWriteAllowed())
    17bc:	85 ff       	sbrs	r24, 5
    17be:	30 c0       	rjmp	.+96     	; 0x1820 <_Z8USB_SendhPKvi+0x118>
				continue;
			len -= n;
    17c0:	c2 1b       	sub	r28, r18
    17c2:	d1 09       	sbc	r29, r1
			if (ep & TRANSFER_ZERO)
    17c4:	a1 14       	cp	r10, r1
    17c6:	b1 04       	cpc	r11, r1
    17c8:	21 f4       	brne	.+8      	; 0x17d2 <_Z8USB_SendhPKvi+0xca>
    17ca:	06 c0       	rjmp	.+12     	; 0x17d8 <_Z8USB_SendhPKvi+0xd0>
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    17cc:	10 92 f1 00 	sts	0x00F1, r1
    17d0:	21 50       	subi	r18, 0x01	; 1
			if (!ReadWriteAllowed())
				continue;
			len -= n;
			if (ep & TRANSFER_ZERO)
			{
				while (n--)
    17d2:	22 23       	and	r18, r18
    17d4:	d9 f7       	brne	.-10     	; 0x17cc <_Z8USB_SendhPKvi+0xc4>
    17d6:	19 c0       	rjmp	.+50     	; 0x180a <_Z8USB_SendhPKvi+0x102>
					Send8(0);
			}
			else if (ep & TRANSFER_PGM)
    17d8:	e7 fc       	sbrc	r14, 7
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <_Z8USB_SendhPKvi+0xda>
    17dc:	f8 01       	movw	r30, r16
    17de:	92 2f       	mov	r25, r18
    17e0:	10 c0       	rjmp	.+32     	; 0x1802 <_Z8USB_SendhPKvi+0xfa>
    17e2:	c8 01       	movw	r24, r16
    17e4:	32 2f       	mov	r19, r18
    17e6:	06 c0       	rjmp	.+12     	; 0x17f4 <_Z8USB_SendhPKvi+0xec>
    17e8:	fc 01       	movw	r30, r24
			{
				while (n--)
					Send8(pgm_read_byte(data++));
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	e4 91       	lpm	r30, Z
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    17ee:	e0 93 f1 00 	sts	0x00F1, r30
    17f2:	31 50       	subi	r19, 0x01	; 1
				while (n--)
					Send8(0);
			}
			else if (ep & TRANSFER_PGM)
			{
				while (n--)
    17f4:	33 23       	and	r19, r19
    17f6:	c1 f7       	brne	.-16     	; 0x17e8 <_Z8USB_SendhPKvi+0xe0>
    17f8:	06 c0       	rjmp	.+12     	; 0x1806 <_Z8USB_SendhPKvi+0xfe>
					Send8(pgm_read_byte(data++));
			}
			else
			{
				while (n--)
					Send8(*data++);
    17fa:	81 91       	ld	r24, Z+
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    17fc:	80 93 f1 00 	sts	0x00F1, r24
    1800:	91 50       	subi	r25, 0x01	; 1
				while (n--)
					Send8(pgm_read_byte(data++));
			}
			else
			{
				while (n--)
    1802:	99 23       	and	r25, r25
    1804:	d1 f7       	brne	.-12     	; 0x17fa <_Z8USB_SendhPKvi+0xf2>
    1806:	02 0f       	add	r16, r18
    1808:	11 1d       	adc	r17, r1
	UECONX = (1<<STALLRQ) | (1<<EPEN);
}

static inline u8 ReadWriteAllowed()
{
	return UEINTX & (1<<RWAL);
    180a:	80 91 e8 00 	lds	r24, 0x00E8
			else
			{
				while (n--)
					Send8(*data++);
			}
			if (!ReadWriteAllowed() || ((len == 0) && (ep & TRANSFER_RELEASE)))	// Release full buffer
    180e:	85 ff       	sbrs	r24, 5
    1810:	05 c0       	rjmp	.+10     	; 0x181c <_Z8USB_SendhPKvi+0x114>
    1812:	20 97       	sbiw	r28, 0x00	; 0
    1814:	29 f4       	brne	.+10     	; 0x1820 <_Z8USB_SendhPKvi+0x118>
    1816:	c1 14       	cp	r12, r1
    1818:	d1 04       	cpc	r13, r1
    181a:	11 f0       	breq	.+4      	; 0x1820 <_Z8USB_SendhPKvi+0x118>
	UEINTX = 0x6B;	// FIFOCON=0 NAKINI=1 RWAL=1 NAKOUTI=0 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=1
}

static inline void ReleaseTX()
{
	UEINTX = 0x3A;	// FIFOCON=0 NAKINI=0 RWAL=1 NAKOUTI=1 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=0
    181c:	60 92 e8 00 	sts	0x00E8, r6
		cli();
		SetEP(ep & 7);
	}
	~LockEP()
	{
		SREG = _sreg;
    1820:	4f bf       	out	0x3f, r20	; 63

	int r = len;
	const u8* data = (const u8*)d;
	u8 zero = ep & TRANSFER_ZERO;
	u8 timeout = 250;		// 250ms timeout on send? TODO
	while (len)
    1822:	20 97       	sbiw	r28, 0x00	; 0
    1824:	09 f0       	breq	.+2      	; 0x1828 <_Z8USB_SendhPKvi+0x120>
    1826:	a1 cf       	rjmp	.-190    	; 0x176a <_Z8USB_SendhPKvi+0x62>
			}
			if (!ReadWriteAllowed() || ((len == 0) && (ep & TRANSFER_RELEASE)))	// Release full buffer
				ReleaseTX();
		}
	}
	TXLED1;					// light the TX LED
    1828:	5d 9a       	sbi	0x0b, 5	; 11
	TxLEDPulse = TX_RX_LED_PULSE_MS;
    182a:	84 e6       	ldi	r24, 0x64	; 100
    182c:	80 93 a5 02 	sts	0x02A5, r24
    1830:	28 2d       	mov	r18, r8
    1832:	37 2d       	mov	r19, r7
    1834:	c9 01       	movw	r24, r18
    1836:	9c 01       	movw	r18, r24
	return r;
}
    1838:	c9 01       	movw	r24, r18
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	df 90       	pop	r13
    1848:	cf 90       	pop	r12
    184a:	bf 90       	pop	r11
    184c:	af 90       	pop	r10
    184e:	9f 90       	pop	r9
    1850:	8f 90       	pop	r8
    1852:	7f 90       	pop	r7
    1854:	6f 90       	pop	r6
    1856:	5f 90       	pop	r5
    1858:	08 95       	ret

0000185a <_Z14SendInterfacesv>:
	Recv((u8*)d,len);
	ClearOUT();
	return len;
}

int SendInterfaces()
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	0f 92       	push	r0
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
{
	int total = 0;
	u8 interfaces = 0;
    1868:	19 82       	std	Y+1, r1	; 0x01

#ifdef CDC_ENABLED
	total = CDC_GetInterface(&interfaces);
    186a:	8e 01       	movw	r16, r28
    186c:	0f 5f       	subi	r16, 0xFF	; 255
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	c8 01       	movw	r24, r16
    1872:	0e 94 9a 09 	call	0x1334	; 0x1334 <_Z16CDC_GetInterfacePh>
#endif

#ifdef HID_ENABLED
	total += HID_GetInterface(&interfaces);
    1876:	c8 01       	movw	r24, r16
    1878:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_Z16HID_GetInterfacePh>
#endif

	return interfaces;
}
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	0f 90       	pop	r0
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	08 95       	ret

0000188c <__vector_11>:
	USB_SendControl(TRANSFER_PGM,desc_addr,desc_length);
	return true;
}

//	Endpoint 0 interrupt
ISR(USB_COM_vect)
    188c:	1f 92       	push	r1
    188e:	0f 92       	push	r0
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	0f 92       	push	r0
    1894:	11 24       	eor	r1, r1
    1896:	ef 92       	push	r14
    1898:	ff 92       	push	r15
    189a:	1f 93       	push	r17
    189c:	2f 93       	push	r18
    189e:	3f 93       	push	r19
    18a0:	4f 93       	push	r20
    18a2:	5f 93       	push	r21
    18a4:	6f 93       	push	r22
    18a6:	7f 93       	push	r23
    18a8:	8f 93       	push	r24
    18aa:	9f 93       	push	r25
    18ac:	af 93       	push	r26
    18ae:	bf 93       	push	r27
    18b0:	ef 93       	push	r30
    18b2:	ff 93       	push	r31
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	61 97       	sbiw	r28, 0x11	; 17
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	cd bf       	out	0x3d, r28	; 61
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    18c2:	10 92 e9 00 	sts	0x00E9, r1
	return UEBCLX;
}

static inline u8 ReceivedSetupInt()
{
	return UEINTX & (1<<RXSTPI);
    18c6:	80 91 e8 00 	lds	r24, 0x00E8

//	Endpoint 0 interrupt
ISR(USB_COM_vect)
{
    SetEP(0);
	if (!ReceivedSetupInt())
    18ca:	83 ff       	sbrs	r24, 3
    18cc:	0f c1       	rjmp	.+542    	; 0x1aec <__vector_11+0x260>
		return;

	Setup setup;
	Recv((u8*)&setup,8);
    18ce:	fe 01       	movw	r30, r28
    18d0:	31 96       	adiw	r30, 0x01	; 1
	UEINTX = ~(1<<RXOUTI);
}

void Recv(volatile u8* data, u8 count)
{
	while (count--)
    18d2:	9e 01       	movw	r18, r28
    18d4:	27 5f       	subi	r18, 0xF7	; 247
    18d6:	3f 4f       	sbci	r19, 0xFF	; 255
    18d8:	03 c0       	rjmp	.+6      	; 0x18e0 <__vector_11+0x54>
		*data++ = UEDATX;
    18da:	80 91 f1 00 	lds	r24, 0x00F1
    18de:	81 93       	st	Z+, r24
	UEINTX = ~(1<<RXOUTI);
}

void Recv(volatile u8* data, u8 count)
{
	while (count--)
    18e0:	e2 17       	cp	r30, r18
    18e2:	f3 07       	cpc	r31, r19
    18e4:	d1 f7       	brne	.-12     	; 0x18da <__vector_11+0x4e>
		*data++ = UEDATX;
	
	RXLED1;					// light the RX LED
    18e6:	28 9a       	sbi	0x05, 0	; 5
	RxLEDPulse = TX_RX_LED_PULSE_MS;	
    18e8:	84 e6       	ldi	r24, 0x64	; 100
    18ea:	80 93 a6 02 	sts	0x02A6, r24
	return UEINTX & (1<<RXSTPI);
}

static inline void ClearSetupInt()
{
	UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    18ee:	82 ef       	ldi	r24, 0xF2	; 242
    18f0:	80 93 e8 00 	sts	0x00E8, r24

	Setup setup;
	Recv((u8*)&setup,8);
	ClearSetupInt();

	u8 requestType = setup.bmRequestType;
    18f4:	99 81       	ldd	r25, Y+1	; 0x01
	if (requestType & REQUEST_DEVICETOHOST)
    18f6:	97 ff       	sbrs	r25, 7
    18f8:	05 c0       	rjmp	.+10     	; 0x1904 <__vector_11+0x78>

volatile u8 _usbConfiguration = 0;

static inline void WaitIN(void)
{
	while (!(UEINTX & (1<<TXINI)));
    18fa:	80 91 e8 00 	lds	r24, 0x00E8
    18fe:	80 ff       	sbrs	r24, 0
    1900:	fc cf       	rjmp	.-8      	; 0x18fa <__vector_11+0x6e>
    1902:	03 c0       	rjmp	.+6      	; 0x190a <__vector_11+0x7e>
}

static inline void ClearIN(void)
{
	UEINTX = ~(1<<TXINI);
    1904:	8e ef       	ldi	r24, 0xFE	; 254
    1906:	80 93 e8 00 	sts	0x00E8, r24
		WaitIN();
	else
		ClearIN();

    bool ok = true;
	if (REQUEST_STANDARD == (requestType & REQUEST_TYPE))
    190a:	29 2f       	mov	r18, r25
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	c9 01       	movw	r24, r18
    1910:	80 76       	andi	r24, 0x60	; 96
    1912:	90 70       	andi	r25, 0x00	; 0
    1914:	89 2b       	or	r24, r25
    1916:	09 f0       	breq	.+2      	; 0x191a <__vector_11+0x8e>
    1918:	c2 c0       	rjmp	.+388    	; 0x1a9e <__vector_11+0x212>
	{
		//	Standard Requests
		u8 r = setup.bRequest;
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
		if (GET_STATUS == r)
    191c:	88 23       	and	r24, r24
    191e:	29 f4       	brne	.+10     	; 0x192a <__vector_11+0x9e>
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    1920:	10 92 f1 00 	sts	0x00F1, r1
    1924:	10 92 f1 00 	sts	0x00F1, r1
    1928:	d6 c0       	rjmp	.+428    	; 0x1ad6 <__vector_11+0x24a>
		if (GET_STATUS == r)
		{
			Send8(0);		// TODO
			Send8(0);
		}
		else if (CLEAR_FEATURE == r)
    192a:	81 30       	cpi	r24, 0x01	; 1
    192c:	09 f4       	brne	.+2      	; 0x1930 <__vector_11+0xa4>
    192e:	d3 c0       	rjmp	.+422    	; 0x1ad6 <__vector_11+0x24a>
		{
		}
		else if (SET_FEATURE == r)
    1930:	83 30       	cpi	r24, 0x03	; 3
    1932:	09 f4       	brne	.+2      	; 0x1936 <__vector_11+0xaa>
    1934:	d0 c0       	rjmp	.+416    	; 0x1ad6 <__vector_11+0x24a>
		{
		}
		else if (SET_ADDRESS == r)
    1936:	85 30       	cpi	r24, 0x05	; 5
    1938:	49 f4       	brne	.+18     	; 0x194c <__vector_11+0xc0>

volatile u8 _usbConfiguration = 0;

static inline void WaitIN(void)
{
	while (!(UEINTX & (1<<TXINI)));
    193a:	80 91 e8 00 	lds	r24, 0x00E8
    193e:	80 ff       	sbrs	r24, 0
    1940:	fc cf       	rjmp	.-8      	; 0x193a <__vector_11+0xae>
		{
		}
		else if (SET_ADDRESS == r)
		{
			WaitIN();
			UDADDR = setup.wValueL | (1<<ADDEN);
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	80 68       	ori	r24, 0x80	; 128
    1946:	80 93 e3 00 	sts	0x00E3, r24
    194a:	c5 c0       	rjmp	.+394    	; 0x1ad6 <__vector_11+0x24a>
		}
		else if (GET_DESCRIPTOR == r)
    194c:	86 30       	cpi	r24, 0x06	; 6
    194e:	09 f0       	breq	.+2      	; 0x1952 <__vector_11+0xc6>
    1950:	7c c0       	rjmp	.+248    	; 0x1a4a <__vector_11+0x1be>
u8 _cdcComposite = 0;

static
bool SendDescriptor(Setup& setup)
{
	u8 t = setup.wValueH;
    1952:	1c 81       	ldd	r17, Y+4	; 0x04
    1954:	ef 80       	ldd	r14, Y+7	; 0x07
    1956:	f8 84       	ldd	r15, Y+8	; 0x08
	if (USB_CONFIGURATION_DESCRIPTOR_TYPE == t)
    1958:	12 30       	cpi	r17, 0x02	; 2
    195a:	c1 f5       	brne	.+112    	; 0x19cc <__vector_11+0x140>
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    195c:	10 92 e9 00 	sts	0x00E9, r1
int _cmark;
int _cend;
void InitControl(int end)
{
	SetEP(0);
	_cmark = 0;
    1960:	10 92 a9 02 	sts	0x02A9, r1
    1964:	10 92 a8 02 	sts	0x02A8, r1
	_cend = end;
    1968:	10 92 ab 02 	sts	0x02AB, r1
    196c:	10 92 aa 02 	sts	0x02AA, r1
static
bool SendConfiguration(int maxlen)
{
	//	Count and measure interfaces
	InitControl(0);	
	int interfaces = SendInterfaces();
    1970:	0e 94 2d 0c 	call	0x185a	; 0x185a <_Z14SendInterfacesv>
	ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
    1974:	99 e0       	ldi	r25, 0x09	; 9
    1976:	fe 01       	movw	r30, r28
    1978:	39 96       	adiw	r30, 0x09	; 9
    197a:	df 01       	movw	r26, r30
    197c:	29 2f       	mov	r18, r25
    197e:	1d 92       	st	X+, r1
    1980:	2a 95       	dec	r18
    1982:	e9 f7       	brne	.-6      	; 0x197e <__vector_11+0xf2>
    1984:	99 87       	std	Y+9, r25	; 0x09
    1986:	1a 87       	std	Y+10, r17	; 0x0a
    1988:	91 e0       	ldi	r25, 0x01	; 1
    198a:	9e 87       	std	Y+14, r25	; 0x0e
    198c:	90 e8       	ldi	r25, 0x80	; 128
    198e:	98 8b       	std	Y+16, r25	; 0x10
    1990:	9a ef       	ldi	r25, 0xFA	; 250
    1992:	99 8b       	std	Y+17, r25	; 0x11
    1994:	20 91 a8 02 	lds	r18, 0x02A8
    1998:	30 91 a9 02 	lds	r19, 0x02A9
    199c:	27 5f       	subi	r18, 0xF7	; 247
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
    19a0:	3c 87       	std	Y+12, r19	; 0x0c
    19a2:	2b 87       	std	Y+11, r18	; 0x0b
    19a4:	8d 87       	std	Y+13, r24	; 0x0d
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    19a6:	10 92 e9 00 	sts	0x00E9, r1
int _cmark;
int _cend;
void InitControl(int end)
{
	SetEP(0);
	_cmark = 0;
    19aa:	10 92 a9 02 	sts	0x02A9, r1
    19ae:	10 92 a8 02 	sts	0x02A8, r1
	_cend = end;
    19b2:	f0 92 ab 02 	sts	0x02AB, r15
    19b6:	e0 92 aa 02 	sts	0x02AA, r14
	int interfaces = SendInterfaces();
	ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);

	//	Now send them
	InitControl(maxlen);
	USB_SendControl(0,&config,sizeof(ConfigDescriptor));
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	bf 01       	movw	r22, r30
    19be:	49 e0       	ldi	r20, 0x09	; 9
    19c0:	50 e0       	ldi	r21, 0x00	; 0
    19c2:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z15USB_SendControlhPKvi>
	SendInterfaces();
    19c6:	0e 94 2d 0c 	call	0x185a	; 0x185a <_Z14SendInterfacesv>
    19ca:	85 c0       	rjmp	.+266    	; 0x1ad6 <__vector_11+0x24a>
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    19cc:	10 92 e9 00 	sts	0x00E9, r1
int _cmark;
int _cend;
void InitControl(int end)
{
	SetEP(0);
	_cmark = 0;
    19d0:	10 92 a9 02 	sts	0x02A9, r1
    19d4:	10 92 a8 02 	sts	0x02A8, r1
	_cend = end;
    19d8:	f0 92 ab 02 	sts	0x02AB, r15
    19dc:	e0 92 aa 02 	sts	0x02AA, r14
	if (USB_CONFIGURATION_DESCRIPTOR_TYPE == t)
		return SendConfiguration(setup.wLength);

	InitControl(setup.wLength);
#ifdef HID_ENABLED
	if (HID_REPORT_DESCRIPTOR_TYPE == t)
    19e0:	12 32       	cpi	r17, 0x22	; 34
    19e2:	41 f4       	brne	.+16     	; 0x19f4 <__vector_11+0x168>
		return HID_GetDescriptor(t);
    19e4:	82 e2       	ldi	r24, 0x22	; 34
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_Z17HID_GetDescriptori>
    19ec:	89 2b       	or	r24, r25
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <__vector_11+0x166>
    19f0:	76 c0       	rjmp	.+236    	; 0x1ade <__vector_11+0x252>
    19f2:	71 c0       	rjmp	.+226    	; 0x1ad6 <__vector_11+0x24a>
#endif

	u8 desc_length = 0;
	const u8* desc_addr = 0;
	if (USB_DEVICE_DESCRIPTOR_TYPE == t)
    19f4:	11 30       	cpi	r17, 0x01	; 1
    19f6:	79 f4       	brne	.+30     	; 0x1a16 <__vector_11+0x18a>
	{
		if (setup.wLength == 8)
    19f8:	88 e0       	ldi	r24, 0x08	; 8
    19fa:	e8 16       	cp	r14, r24
    19fc:	f1 04       	cpc	r15, r1
    19fe:	19 f4       	brne	.+6      	; 0x1a06 <__vector_11+0x17a>
			_cdcComposite = 1;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	80 93 ac 02 	sts	0x02AC, r24
		desc_addr = _cdcComposite ?  (const u8*)&USB_DeviceDescriptorA : (const u8*)&USB_DeviceDescriptor;
    1a06:	80 91 ac 02 	lds	r24, 0x02AC
    1a0a:	88 23       	and	r24, r24
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <__vector_11+0x184>
    1a0e:	6b c0       	rjmp	.+214    	; 0x1ae6 <__vector_11+0x25a>
    1a10:	e8 e5       	ldi	r30, 0x58	; 88
    1a12:	f2 e0       	ldi	r31, 0x02	; 2
    1a14:	13 c0       	rjmp	.+38     	; 0x1a3c <__vector_11+0x1b0>
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    1a16:	13 30       	cpi	r17, 0x03	; 3
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <__vector_11+0x190>
    1a1a:	61 c0       	rjmp	.+194    	; 0x1ade <__vector_11+0x252>
	{
		if (setup.wValueL == 0)
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	88 23       	and	r24, r24
    1a20:	19 f4       	brne	.+6      	; 0x1a28 <__vector_11+0x19c>
			desc_addr = (const u8*)&STRING_LANGUAGE;
    1a22:	ea e1       	ldi	r30, 0x1A	; 26
    1a24:	f2 e0       	ldi	r31, 0x02	; 2
    1a26:	0a c0       	rjmp	.+20     	; 0x1a3c <__vector_11+0x1b0>
		else if (setup.wValueL == IPRODUCT) 
    1a28:	82 30       	cpi	r24, 0x02	; 2
    1a2a:	19 f4       	brne	.+6      	; 0x1a32 <__vector_11+0x1a6>
			desc_addr = (const u8*)&STRING_IPRODUCT;
    1a2c:	ee e1       	ldi	r30, 0x1E	; 30
    1a2e:	f2 e0       	ldi	r31, 0x02	; 2
    1a30:	05 c0       	rjmp	.+10     	; 0x1a3c <__vector_11+0x1b0>
		else if (setup.wValueL == IMANUFACTURER)
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <__vector_11+0x1ac>
    1a36:	53 c0       	rjmp	.+166    	; 0x1ade <__vector_11+0x252>
			desc_addr = (const u8*)&STRING_IMANUFACTURER;
    1a38:	e0 e4       	ldi	r30, 0x40	; 64
    1a3a:	f2 e0       	ldi	r31, 0x02	; 2
	}

	if (desc_addr == 0)
		return false;
	if (desc_length == 0)
		desc_length = pgm_read_byte(desc_addr);
    1a3c:	44 91       	lpm	r20, Z

	USB_SendControl(TRANSFER_PGM,desc_addr,desc_length);
    1a3e:	80 e8       	ldi	r24, 0x80	; 128
    1a40:	bf 01       	movw	r22, r30
    1a42:	50 e0       	ldi	r21, 0x00	; 0
    1a44:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z15USB_SendControlhPKvi>
    1a48:	46 c0       	rjmp	.+140    	; 0x1ad6 <__vector_11+0x24a>
		}
		else if (GET_DESCRIPTOR == r)
		{
			ok = SendDescriptor(setup);
		}
		else if (SET_DESCRIPTOR == r)
    1a4a:	87 30       	cpi	r24, 0x07	; 7
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <__vector_11+0x1c4>
    1a4e:	47 c0       	rjmp	.+142    	; 0x1ade <__vector_11+0x252>
		{
			ok = false;
		}
		else if (GET_CONFIGURATION == r)
    1a50:	88 30       	cpi	r24, 0x08	; 8
    1a52:	21 f4       	brne	.+8      	; 0x1a5c <__vector_11+0x1d0>
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	80 93 f1 00 	sts	0x00F1, r24
    1a5a:	3d c0       	rjmp	.+122    	; 0x1ad6 <__vector_11+0x24a>
		}
		else if (GET_CONFIGURATION == r)
		{
			Send8(1);
		}
		else if (SET_CONFIGURATION == r)
    1a5c:	89 30       	cpi	r24, 0x09	; 9
    1a5e:	d9 f5       	brne	.+118    	; 0x1ad6 <__vector_11+0x24a>
		{
			if (REQUEST_DEVICE == (requestType & REQUEST_RECIPIENT))
    1a60:	23 70       	andi	r18, 0x03	; 3
    1a62:	30 70       	andi	r19, 0x00	; 0
    1a64:	23 2b       	or	r18, r19
    1a66:	d9 f5       	brne	.+118    	; 0x1ade <__vector_11+0x252>
    1a68:	ed e7       	ldi	r30, 0x7D	; 125
    1a6a:	f2 e0       	ldi	r31, 0x02	; 2
    1a6c:	91 e0       	ldi	r25, 0x01	; 1
void InitEndpoints()
{
	for (u8 i = 1; i < sizeof(_initEndpoints); i++)
	{
		UENUM = i;
		UECONX = 1;
    1a6e:	31 e0       	ldi	r19, 0x01	; 1
		UECFG0X = pgm_read_byte(_initEndpoints+i);
		UECFG1X = EP_DOUBLE_64;
    1a70:	26 e3       	ldi	r18, 0x36	; 54
static
void InitEndpoints()
{
	for (u8 i = 1; i < sizeof(_initEndpoints); i++)
	{
		UENUM = i;
    1a72:	90 93 e9 00 	sts	0x00E9, r25
		UECONX = 1;
    1a76:	30 93 eb 00 	sts	0x00EB, r19
		UECFG0X = pgm_read_byte(_initEndpoints+i);
    1a7a:	84 91       	lpm	r24, Z
    1a7c:	80 93 ec 00 	sts	0x00EC, r24
		UECFG1X = EP_DOUBLE_64;
    1a80:	20 93 ed 00 	sts	0x00ED, r18
}

static
void InitEndpoints()
{
	for (u8 i = 1; i < sizeof(_initEndpoints); i++)
    1a84:	9f 5f       	subi	r25, 0xFF	; 255
    1a86:	31 96       	adiw	r30, 0x01	; 1
    1a88:	95 30       	cpi	r25, 0x05	; 5
    1a8a:	99 f7       	brne	.-26     	; 0x1a72 <__vector_11+0x1e6>
		UENUM = i;
		UECONX = 1;
		UECFG0X = pgm_read_byte(_initEndpoints+i);
		UECFG1X = EP_DOUBLE_64;
	}
	UERST = 0x7E;	// And reset them
    1a8c:	8e e7       	ldi	r24, 0x7E	; 126
    1a8e:	80 93 ea 00 	sts	0x00EA, r24
	UERST = 0;
    1a92:	10 92 ea 00 	sts	0x00EA, r1
		else if (SET_CONFIGURATION == r)
		{
			if (REQUEST_DEVICE == (requestType & REQUEST_RECIPIENT))
			{
				InitEndpoints();
				_usbConfiguration = setup.wValueL;
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	80 93 a7 02 	sts	0x02A7, r24
    1a9c:	1c c0       	rjmp	.+56     	; 0x1ad6 <__vector_11+0x24a>
		{
		}
	}
	else
	{
		InitControl(setup.wLength);		//	Max length of transfer
    1a9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa0:	98 85       	ldd	r25, Y+8	; 0x08
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    1aa2:	10 92 e9 00 	sts	0x00E9, r1
int _cmark;
int _cend;
void InitControl(int end)
{
	SetEP(0);
	_cmark = 0;
    1aa6:	10 92 a9 02 	sts	0x02A9, r1
    1aaa:	10 92 a8 02 	sts	0x02A8, r1
	_cend = end;
    1aae:	90 93 ab 02 	sts	0x02AB, r25
    1ab2:	80 93 aa 02 	sts	0x02AA, r24

//	Handle CLASS_INTERFACE requests
static
bool ClassInterfaceRequest(Setup& setup)
{
	u8 i = setup.wIndex;
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05

#ifdef CDC_ENABLED
	if (CDC_ACM_INTERFACE == i)
    1ab8:	88 23       	and	r24, r24
    1aba:	29 f4       	brne	.+10     	; 0x1ac6 <__vector_11+0x23a>
		return CDC_Setup(setup);
    1abc:	ce 01       	movw	r24, r28
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	0e 94 a6 09 	call	0x134c	; 0x134c <_Z9CDC_SetupR5Setup>
    1ac4:	06 c0       	rjmp	.+12     	; 0x1ad2 <__vector_11+0x246>
#endif

#ifdef HID_ENABLED
	if (HID_INTERFACE == i)
    1ac6:	82 30       	cpi	r24, 0x02	; 2
    1ac8:	51 f4       	brne	.+20     	; 0x1ade <__vector_11+0x252>
		return HID_Setup(setup);
    1aca:	ce 01       	movw	r24, r28
    1acc:	01 96       	adiw	r24, 0x01	; 1
    1ace:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <_Z9HID_SetupR5Setup>
	{
		InitControl(setup.wLength);		//	Max length of transfer
		ok = ClassInterfaceRequest(setup);
	}

	if (ok)
    1ad2:	88 23       	and	r24, r24
    1ad4:	21 f0       	breq	.+8      	; 0x1ade <__vector_11+0x252>
	while (!(UEINTX & (1<<TXINI)));
}

static inline void ClearIN(void)
{
	UEINTX = ~(1<<TXINI);
    1ad6:	8e ef       	ldi	r24, 0xFE	; 254
    1ad8:	80 93 e8 00 	sts	0x00E8, r24
    1adc:	07 c0       	rjmp	.+14     	; 0x1aec <__vector_11+0x260>
	UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
}

static inline void Stall()
{
	UECONX = (1<<STALLRQ) | (1<<EPEN);
    1ade:	81 e2       	ldi	r24, 0x21	; 33
    1ae0:	80 93 eb 00 	sts	0x00EB, r24
    1ae4:	03 c0       	rjmp	.+6      	; 0x1aec <__vector_11+0x260>
    1ae6:	ea e6       	ldi	r30, 0x6A	; 106
    1ae8:	f2 e0       	ldi	r31, 0x02	; 2
    1aea:	a8 cf       	rjmp	.-176    	; 0x1a3c <__vector_11+0x1b0>
		ClearIN();
	else
	{
		Stall();
	}
}
    1aec:	61 96       	adiw	r28, 0x11	; 17
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	ff 91       	pop	r31
    1af8:	ef 91       	pop	r30
    1afa:	bf 91       	pop	r27
    1afc:	af 91       	pop	r26
    1afe:	9f 91       	pop	r25
    1b00:	8f 91       	pop	r24
    1b02:	7f 91       	pop	r23
    1b04:	6f 91       	pop	r22
    1b06:	5f 91       	pop	r21
    1b08:	4f 91       	pop	r20
    1b0a:	3f 91       	pop	r19
    1b0c:	2f 91       	pop	r18
    1b0e:	1f 91       	pop	r17
    1b10:	ff 90       	pop	r15
    1b12:	ef 90       	pop	r14
    1b14:	0f 90       	pop	r0
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	0f 90       	pop	r0
    1b1a:	1f 90       	pop	r1
    1b1c:	18 95       	reti

00001b1e <_Z9HID_SetupR5Setup>:
{
	_buttons = b;
	move(0,0,0);
	_buttons = 0;
	move(0,0,0);
}
    1b1e:	fc 01       	movw	r30, r24
    1b20:	91 81       	ldd	r25, Z+1	; 0x01
    1b22:	80 81       	ld	r24, Z
    1b24:	81 3a       	cpi	r24, 0xA1	; 161
    1b26:	31 f4       	brne	.+12     	; 0x1b34 <_Z9HID_SetupR5Setup+0x16>
    1b28:	91 30       	cpi	r25, 0x01	; 1
    1b2a:	89 f0       	breq	.+34     	; 0x1b4e <_Z9HID_SetupR5Setup+0x30>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	93 30       	cpi	r25, 0x03	; 3
    1b30:	89 f4       	brne	.+34     	; 0x1b54 <_Z9HID_SetupR5Setup+0x36>
    1b32:	0d c0       	rjmp	.+26     	; 0x1b4e <_Z9HID_SetupR5Setup+0x30>
    1b34:	81 32       	cpi	r24, 0x21	; 33
    1b36:	69 f4       	brne	.+26     	; 0x1b52 <_Z9HID_SetupR5Setup+0x34>
    1b38:	9b 30       	cpi	r25, 0x0B	; 11
    1b3a:	21 f4       	brne	.+8      	; 0x1b44 <_Z9HID_SetupR5Setup+0x26>
    1b3c:	82 81       	ldd	r24, Z+2	; 0x02
    1b3e:	80 93 1c 01 	sts	0x011C, r24
    1b42:	05 c0       	rjmp	.+10     	; 0x1b4e <_Z9HID_SetupR5Setup+0x30>
    1b44:	9a 30       	cpi	r25, 0x0A	; 10
    1b46:	29 f4       	brne	.+10     	; 0x1b52 <_Z9HID_SetupR5Setup+0x34>
    1b48:	82 81       	ldd	r24, Z+2	; 0x02
    1b4a:	80 93 1d 01 	sts	0x011D, r24
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	08 95       	ret
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	08 95       	ret

00001b56 <_ZN9Keyboard_5writeEh>:
    1b56:	ef 92       	push	r14
    1b58:	ff 92       	push	r15
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	8c 01       	movw	r16, r24
    1b60:	e6 2e       	mov	r14, r22
    1b62:	dc 01       	movw	r26, r24
    1b64:	ed 91       	ld	r30, X+
    1b66:	fc 91       	ld	r31, X
    1b68:	04 80       	ldd	r0, Z+4	; 0x04
    1b6a:	f5 81       	ldd	r31, Z+5	; 0x05
    1b6c:	e0 2d       	mov	r30, r0
    1b6e:	09 95       	icall
    1b70:	f8 2e       	mov	r15, r24
    1b72:	d8 01       	movw	r26, r16
    1b74:	ed 91       	ld	r30, X+
    1b76:	fc 91       	ld	r31, X
    1b78:	06 80       	ldd	r0, Z+6	; 0x06
    1b7a:	f7 81       	ldd	r31, Z+7	; 0x07
    1b7c:	e0 2d       	mov	r30, r0
    1b7e:	c8 01       	movw	r24, r16
    1b80:	6e 2d       	mov	r22, r14
    1b82:	09 95       	icall
    1b84:	8f 2d       	mov	r24, r15
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	ff 90       	pop	r15
    1b8e:	ef 90       	pop	r14
    1b90:	08 95       	ret

00001b92 <_GLOBAL__I_Mouse>:
    1b92:	10 92 ae 02 	sts	0x02AE, r1
    1b96:	10 92 b2 02 	sts	0x02B2, r1
    1b9a:	10 92 b1 02 	sts	0x02B1, r1
    1b9e:	84 e6       	ldi	r24, 0x64	; 100
    1ba0:	91 e0       	ldi	r25, 0x01	; 1
    1ba2:	90 93 b0 02 	sts	0x02B0, r25
    1ba6:	80 93 af 02 	sts	0x02AF, r24
    1baa:	08 95       	ret

00001bac <_Z14HID_SendReporthPKvi>:
    1bac:	ef 92       	push	r14
    1bae:	ff 92       	push	r15
    1bb0:	0f 93       	push	r16
    1bb2:	1f 93       	push	r17
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	0f 92       	push	r0
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	8b 01       	movw	r16, r22
    1bc2:	7a 01       	movw	r14, r20
    1bc4:	84 e0       	ldi	r24, 0x04	; 4
    1bc6:	be 01       	movw	r22, r28
    1bc8:	6f 5f       	subi	r22, 0xFF	; 255
    1bca:	7f 4f       	sbci	r23, 0xFF	; 255
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	0e 94 84 0b 	call	0x1708	; 0x1708 <_Z8USB_SendhPKvi>
    1bd4:	84 e4       	ldi	r24, 0x44	; 68
    1bd6:	b8 01       	movw	r22, r16
    1bd8:	a7 01       	movw	r20, r14
    1bda:	0e 94 84 0b 	call	0x1708	; 0x1708 <_Z8USB_SendhPKvi>
    1bde:	0f 90       	pop	r0
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	1f 91       	pop	r17
    1be6:	0f 91       	pop	r16
    1be8:	ff 90       	pop	r15
    1bea:	ef 90       	pop	r14
    1bec:	08 95       	ret

00001bee <_ZN9Keyboard_10sendReportEP9KeyReport>:
    1bee:	82 e0       	ldi	r24, 0x02	; 2
    1bf0:	48 e0       	ldi	r20, 0x08	; 8
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_Z14HID_SendReporthPKvi>
    1bf8:	08 95       	ret

00001bfa <_ZN9Keyboard_10releaseAllEv>:
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	16 82       	std	Z+6, r1	; 0x06
    1bfe:	17 82       	std	Z+7, r1	; 0x07
    1c00:	10 86       	std	Z+8, r1	; 0x08
    1c02:	11 86       	std	Z+9, r1	; 0x09
    1c04:	12 86       	std	Z+10, r1	; 0x0a
    1c06:	13 86       	std	Z+11, r1	; 0x0b
    1c08:	14 82       	std	Z+4, r1	; 0x04
    1c0a:	34 96       	adiw	r30, 0x04	; 4
    1c0c:	bf 01       	movw	r22, r30
    1c0e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN9Keyboard_10sendReportEP9KeyReport>
    1c12:	08 95       	ret

00001c14 <_ZN9Keyboard_7releaseEh>:
    1c14:	dc 01       	movw	r26, r24
    1c16:	68 38       	cpi	r22, 0x88	; 136
    1c18:	10 f0       	brcs	.+4      	; 0x1c1e <_ZN9Keyboard_7releaseEh+0xa>
    1c1a:	68 58       	subi	r22, 0x88	; 136
    1c1c:	29 c0       	rjmp	.+82     	; 0x1c70 <_ZN9Keyboard_7releaseEh+0x5c>
    1c1e:	e6 2f       	mov	r30, r22
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	67 ff       	sbrs	r22, 7
    1c24:	13 c0       	rjmp	.+38     	; 0x1c4c <_ZN9Keyboard_7releaseEh+0x38>
    1c26:	e0 58       	subi	r30, 0x80	; 128
    1c28:	f0 40       	sbci	r31, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <_ZN9Keyboard_7releaseEh+0x20>
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	ea 95       	dec	r30
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <_ZN9Keyboard_7releaseEh+0x1c>
    1c38:	80 95       	com	r24
    1c3a:	14 96       	adiw	r26, 0x04	; 4
    1c3c:	2c 91       	ld	r18, X
    1c3e:	14 97       	sbiw	r26, 0x04	; 4
    1c40:	28 23       	and	r18, r24
    1c42:	14 96       	adiw	r26, 0x04	; 4
    1c44:	2c 93       	st	X, r18
    1c46:	14 97       	sbiw	r26, 0x04	; 4
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	12 c0       	rjmp	.+36     	; 0x1c70 <_ZN9Keyboard_7releaseEh+0x5c>
    1c4c:	e1 50       	subi	r30, 0x01	; 1
    1c4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1c50:	64 91       	lpm	r22, Z
    1c52:	66 23       	and	r22, r22
    1c54:	19 f4       	brne	.+6      	; 0x1c5c <_ZN9Keyboard_7releaseEh+0x48>
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	1d c0       	rjmp	.+58     	; 0x1c96 <_ZN9Keyboard_7releaseEh+0x82>
    1c5c:	67 ff       	sbrs	r22, 7
    1c5e:	08 c0       	rjmp	.+16     	; 0x1c70 <_ZN9Keyboard_7releaseEh+0x5c>
    1c60:	14 96       	adiw	r26, 0x04	; 4
    1c62:	8c 91       	ld	r24, X
    1c64:	14 97       	sbiw	r26, 0x04	; 4
    1c66:	8d 7f       	andi	r24, 0xFD	; 253
    1c68:	14 96       	adiw	r26, 0x04	; 4
    1c6a:	8c 93       	st	X, r24
    1c6c:	14 97       	sbiw	r26, 0x04	; 4
    1c6e:	6f 77       	andi	r22, 0x7F	; 127
    1c70:	fd 01       	movw	r30, r26
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	66 23       	and	r22, r22
    1c76:	21 f0       	breq	.+8      	; 0x1c80 <_ZN9Keyboard_7releaseEh+0x6c>
    1c78:	86 81       	ldd	r24, Z+6	; 0x06
    1c7a:	86 17       	cp	r24, r22
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <_ZN9Keyboard_7releaseEh+0x6c>
    1c7e:	16 82       	std	Z+6, r1	; 0x06
    1c80:	9f 5f       	subi	r25, 0xFF	; 255
    1c82:	31 96       	adiw	r30, 0x01	; 1
    1c84:	96 30       	cpi	r25, 0x06	; 6
    1c86:	b1 f7       	brne	.-20     	; 0x1c74 <_ZN9Keyboard_7releaseEh+0x60>
    1c88:	cd 01       	movw	r24, r26
    1c8a:	14 96       	adiw	r26, 0x04	; 4
    1c8c:	bd 01       	movw	r22, r26
    1c8e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN9Keyboard_10sendReportEP9KeyReport>
    1c92:	21 e0       	ldi	r18, 0x01	; 1
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	c9 01       	movw	r24, r18
    1c98:	08 95       	ret

00001c9a <_ZN9Keyboard_5pressEh>:
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	68 38       	cpi	r22, 0x88	; 136
    1ca2:	10 f0       	brcs	.+4      	; 0x1ca8 <_ZN9Keyboard_5pressEh+0xe>
    1ca4:	68 58       	subi	r22, 0x88	; 136
    1ca6:	25 c0       	rjmp	.+74     	; 0x1cf2 <_ZN9Keyboard_5pressEh+0x58>
    1ca8:	e6 2f       	mov	r30, r22
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	67 ff       	sbrs	r22, 7
    1cae:	12 c0       	rjmp	.+36     	; 0x1cd4 <_ZN9Keyboard_5pressEh+0x3a>
    1cb0:	e0 58       	subi	r30, 0x80	; 128
    1cb2:	f0 40       	sbci	r31, 0x00	; 0
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <_ZN9Keyboard_5pressEh+0x24>
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	ea 95       	dec	r30
    1cc0:	e2 f7       	brpl	.-8      	; 0x1cba <_ZN9Keyboard_5pressEh+0x20>
    1cc2:	14 96       	adiw	r26, 0x04	; 4
    1cc4:	2c 91       	ld	r18, X
    1cc6:	14 97       	sbiw	r26, 0x04	; 4
    1cc8:	28 2b       	or	r18, r24
    1cca:	14 96       	adiw	r26, 0x04	; 4
    1ccc:	2c 93       	st	X, r18
    1cce:	14 97       	sbiw	r26, 0x04	; 4
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	0f c0       	rjmp	.+30     	; 0x1cf2 <_ZN9Keyboard_5pressEh+0x58>
    1cd4:	e1 50       	subi	r30, 0x01	; 1
    1cd6:	fd 4f       	sbci	r31, 0xFD	; 253
    1cd8:	64 91       	lpm	r22, Z
    1cda:	66 23       	and	r22, r22
    1cdc:	d9 f1       	breq	.+118    	; 0x1d54 <_ZN9Keyboard_5pressEh+0xba>
    1cde:	67 ff       	sbrs	r22, 7
    1ce0:	08 c0       	rjmp	.+16     	; 0x1cf2 <_ZN9Keyboard_5pressEh+0x58>
    1ce2:	14 96       	adiw	r26, 0x04	; 4
    1ce4:	8c 91       	ld	r24, X
    1ce6:	14 97       	sbiw	r26, 0x04	; 4
    1ce8:	82 60       	ori	r24, 0x02	; 2
    1cea:	14 96       	adiw	r26, 0x04	; 4
    1cec:	8c 93       	st	X, r24
    1cee:	14 97       	sbiw	r26, 0x04	; 4
    1cf0:	6f 77       	andi	r22, 0x7F	; 127
    1cf2:	16 96       	adiw	r26, 0x06	; 6
    1cf4:	8c 91       	ld	r24, X
    1cf6:	16 97       	sbiw	r26, 0x06	; 6
    1cf8:	86 17       	cp	r24, r22
    1cfa:	a9 f1       	breq	.+106    	; 0x1d66 <_ZN9Keyboard_5pressEh+0xcc>
    1cfc:	17 96       	adiw	r26, 0x07	; 7
    1cfe:	8c 91       	ld	r24, X
    1d00:	17 97       	sbiw	r26, 0x07	; 7
    1d02:	86 17       	cp	r24, r22
    1d04:	81 f1       	breq	.+96     	; 0x1d66 <_ZN9Keyboard_5pressEh+0xcc>
    1d06:	18 96       	adiw	r26, 0x08	; 8
    1d08:	8c 91       	ld	r24, X
    1d0a:	18 97       	sbiw	r26, 0x08	; 8
    1d0c:	86 17       	cp	r24, r22
    1d0e:	59 f1       	breq	.+86     	; 0x1d66 <_ZN9Keyboard_5pressEh+0xcc>
    1d10:	19 96       	adiw	r26, 0x09	; 9
    1d12:	8c 91       	ld	r24, X
    1d14:	19 97       	sbiw	r26, 0x09	; 9
    1d16:	86 17       	cp	r24, r22
    1d18:	31 f1       	breq	.+76     	; 0x1d66 <_ZN9Keyboard_5pressEh+0xcc>
    1d1a:	1a 96       	adiw	r26, 0x0a	; 10
    1d1c:	8c 91       	ld	r24, X
    1d1e:	1a 97       	sbiw	r26, 0x0a	; 10
    1d20:	86 17       	cp	r24, r22
    1d22:	09 f1       	breq	.+66     	; 0x1d66 <_ZN9Keyboard_5pressEh+0xcc>
    1d24:	1b 96       	adiw	r26, 0x0b	; 11
    1d26:	8c 91       	ld	r24, X
    1d28:	1b 97       	sbiw	r26, 0x0b	; 11
    1d2a:	86 17       	cp	r24, r22
    1d2c:	e1 f0       	breq	.+56     	; 0x1d66 <_ZN9Keyboard_5pressEh+0xcc>
    1d2e:	ed 01       	movw	r28, r26
    1d30:	e0 e0       	ldi	r30, 0x00	; 0
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	9e 2f       	mov	r25, r30
    1d36:	8e 81       	ldd	r24, Y+6	; 0x06
    1d38:	88 23       	and	r24, r24
    1d3a:	21 f4       	brne	.+8      	; 0x1d44 <_ZN9Keyboard_5pressEh+0xaa>
    1d3c:	ea 0f       	add	r30, r26
    1d3e:	fb 1f       	adc	r31, r27
    1d40:	66 83       	std	Z+6, r22	; 0x06
    1d42:	06 c0       	rjmp	.+12     	; 0x1d50 <_ZN9Keyboard_5pressEh+0xb6>
    1d44:	9f 5f       	subi	r25, 0xFF	; 255
    1d46:	31 96       	adiw	r30, 0x01	; 1
    1d48:	21 96       	adiw	r28, 0x01	; 1
    1d4a:	e6 30       	cpi	r30, 0x06	; 6
    1d4c:	f1 05       	cpc	r31, r1
    1d4e:	91 f7       	brne	.-28     	; 0x1d34 <_ZN9Keyboard_5pressEh+0x9a>
    1d50:	96 30       	cpi	r25, 0x06	; 6
    1d52:	49 f4       	brne	.+18     	; 0x1d66 <_ZN9Keyboard_5pressEh+0xcc>
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	13 96       	adiw	r26, 0x03	; 3
    1d5a:	9c 93       	st	X, r25
    1d5c:	8e 93       	st	-X, r24
    1d5e:	12 97       	sbiw	r26, 0x02	; 2
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	07 c0       	rjmp	.+14     	; 0x1d74 <_ZN9Keyboard_5pressEh+0xda>
    1d66:	cd 01       	movw	r24, r26
    1d68:	14 96       	adiw	r26, 0x04	; 4
    1d6a:	bd 01       	movw	r22, r26
    1d6c:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN9Keyboard_10sendReportEP9KeyReport>
    1d70:	21 e0       	ldi	r18, 0x01	; 1
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	c9 01       	movw	r24, r18
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	08 95       	ret

00001d7c <_Z17HID_GetDescriptori>:
	return USB_SendControl(TRANSFER_PGM,&_hidInterface,sizeof(_hidInterface));
}

int WEAK HID_GetDescriptor(int i)
{
	return USB_SendControl(TRANSFER_PGM,_hidReportDescriptor,sizeof(_hidReportDescriptor));
    1d7c:	80 e8       	ldi	r24, 0x80	; 128
    1d7e:	61 e8       	ldi	r22, 0x81	; 129
    1d80:	72 e0       	ldi	r23, 0x02	; 2
    1d82:	45 e6       	ldi	r20, 0x65	; 101
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z15USB_SendControlhPKvi>
}
    1d8a:	08 95       	ret

00001d8c <_Z16HID_GetInterfacePh>:
u8 _hid_protocol = 1;
u8 _hid_idle = 1;

#define WEAK __attribute__ ((weak))

int WEAK HID_GetInterface(u8* interfaceNum)
    1d8c:	fc 01       	movw	r30, r24
{
	interfaceNum[0] += 1;	// uses 1
    1d8e:	80 81       	ld	r24, Z
    1d90:	8f 5f       	subi	r24, 0xFF	; 255
    1d92:	80 83       	st	Z, r24
	return USB_SendControl(TRANSFER_PGM,&_hidInterface,sizeof(_hidInterface));
    1d94:	80 e8       	ldi	r24, 0x80	; 128
    1d96:	66 ee       	ldi	r22, 0xE6	; 230
    1d98:	72 e0       	ldi	r23, 0x02	; 2
    1d9a:	49 e1       	ldi	r20, 0x19	; 25
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z15USB_SendControlhPKvi>
}
    1da2:	08 95       	ret

00001da4 <__divmodhi4>:
    1da4:	97 fb       	bst	r25, 7
    1da6:	07 2e       	mov	r0, r23
    1da8:	16 f4       	brtc	.+4      	; 0x1dae <__divmodhi4+0xa>
    1daa:	00 94       	com	r0
    1dac:	07 d0       	rcall	.+14     	; 0x1dbc <__divmodhi4_neg1>
    1dae:	77 fd       	sbrc	r23, 7
    1db0:	09 d0       	rcall	.+18     	; 0x1dc4 <__divmodhi4_neg2>
    1db2:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__udivmodhi4>
    1db6:	07 fc       	sbrc	r0, 7
    1db8:	05 d0       	rcall	.+10     	; 0x1dc4 <__divmodhi4_neg2>
    1dba:	3e f4       	brtc	.+14     	; 0x1dca <__divmodhi4_exit>

00001dbc <__divmodhi4_neg1>:
    1dbc:	90 95       	com	r25
    1dbe:	81 95       	neg	r24
    1dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc2:	08 95       	ret

00001dc4 <__divmodhi4_neg2>:
    1dc4:	70 95       	com	r23
    1dc6:	61 95       	neg	r22
    1dc8:	7f 4f       	sbci	r23, 0xFF	; 255

00001dca <__divmodhi4_exit>:
    1dca:	08 95       	ret

00001dcc <__udivmodhi4>:
    1dcc:	aa 1b       	sub	r26, r26
    1dce:	bb 1b       	sub	r27, r27
    1dd0:	51 e1       	ldi	r21, 0x11	; 17
    1dd2:	07 c0       	rjmp	.+14     	; 0x1de2 <__udivmodhi4_ep>

00001dd4 <__udivmodhi4_loop>:
    1dd4:	aa 1f       	adc	r26, r26
    1dd6:	bb 1f       	adc	r27, r27
    1dd8:	a6 17       	cp	r26, r22
    1dda:	b7 07       	cpc	r27, r23
    1ddc:	10 f0       	brcs	.+4      	; 0x1de2 <__udivmodhi4_ep>
    1dde:	a6 1b       	sub	r26, r22
    1de0:	b7 0b       	sbc	r27, r23

00001de2 <__udivmodhi4_ep>:
    1de2:	88 1f       	adc	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	5a 95       	dec	r21
    1de8:	a9 f7       	brne	.-22     	; 0x1dd4 <__udivmodhi4_loop>
    1dea:	80 95       	com	r24
    1dec:	90 95       	com	r25
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	08 95       	ret

00001df4 <__tablejump2__>:
    1df4:	ee 0f       	add	r30, r30
    1df6:	ff 1f       	adc	r31, r31

00001df8 <__tablejump__>:
    1df8:	05 90       	lpm	r0, Z+
    1dfa:	f4 91       	lpm	r31, Z
    1dfc:	e0 2d       	mov	r30, r0
    1dfe:	09 94       	ijmp

00001e00 <__do_global_dtors>:
    1e00:	13 e0       	ldi	r17, 0x03	; 3
    1e02:	ca e8       	ldi	r28, 0x8A	; 138
    1e04:	d3 e0       	ldi	r29, 0x03	; 3
    1e06:	04 c0       	rjmp	.+8      	; 0x1e10 <__do_global_dtors+0x10>
    1e08:	fe 01       	movw	r30, r28
    1e0a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__tablejump__>
    1e0e:	22 96       	adiw	r28, 0x02	; 2
    1e10:	cc 38       	cpi	r28, 0x8C	; 140
    1e12:	d1 07       	cpc	r29, r17
    1e14:	c9 f7       	brne	.-14     	; 0x1e08 <__do_global_dtors+0x8>
    1e16:	f8 94       	cli

00001e18 <__stop_program>:
    1e18:	ff cf       	rjmp	.-2      	; 0x1e18 <__stop_program>
